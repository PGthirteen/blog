(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{577:function(s,e,t){"use strict";t.r(e);var n=t(0),a=Object(n.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"hooks中的usestate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hooks中的usestate"}},[s._v("#")]),s._v(" Hooks中的useState")]),s._v(" "),e("p",[e("code",[s._v("React")]),s._v("的数据是自顶向下单向流动的，即从父组件到子组件中，组件的数据存储在"),e("code",[s._v("props")]),s._v("和"),e("code",[s._v("state")]),s._v("中，实际上在任何应用中，数据都是必不可少的，我们需要直接的改变页面上一块的区域来使得视图的刷新，或者间接地改变其他地方的数据，在"),e("code",[s._v("React")]),s._v("中就使用"),e("code",[s._v("props")]),s._v("和"),e("code",[s._v("state")]),s._v("两个属性存储数据。"),e("code",[s._v("state")]),s._v("的主要作用是用于组件保存、控制、修改自己的可变状态，"),e("code",[s._v("state")]),s._v("在组件内部初始化，可以被组件自身修改，而外部不能访问也不能修改，可以认为"),e("code",[s._v("state")]),s._v("是一个局部的、只能被组件自身控制的数据源，而对于"),e("code",[s._v("React")]),s._v("函数组件，"),e("code",[s._v("useState")]),s._v("即是用来管理自身状态"),e("code",[s._v("hooks")]),s._v("函数。")]),s._v(" "),e("h2",{attrs:{id:"hooks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hooks"}},[s._v("#")]),s._v(" Hooks")]),s._v(" "),e("p",[s._v("对于"),e("code",[s._v("React Hooks")]),s._v("这个"),e("code",[s._v("Hooks")]),s._v("的意思，阮一峰大佬解释说，"),e("code",[s._v("React Hooks")]),s._v("的意思是，组件尽量写成纯函数，如果需要外部功能和副作用，就用钩子把外部代码钩进来，"),e("code",[s._v("React Hooks")]),s._v("就是那些钩子。我觉得这个解释非常到位了，拿"),e("code",[s._v("useState")]),s._v("来说，在写函数组件的时候是将这个函数勾过来使用，而在这个函数内部是保存着一些内部的作用域变量的，也就是常说的闭包，所以"),e("code",[s._v("Hooks")]),s._v("也可以理解为将另一个作用域变量以及函数逻辑勾过来在当前作用域使用。"),e("br"),s._v("\n对于为什么要用"),e("code",[s._v("React Hooks")]),s._v("，总结来说还是为了组件复用，特别在更加细粒度的组件复用方面"),e("code",[s._v("React Hooks")]),s._v("表现更好。在"),e("code",[s._v("React")]),s._v("中代码复用的解决方案层出不穷，但是整体来说代码复用还是很复杂的，这其中很大一部分原因在于细粒度代码复用不应该与组件复用捆绑在一起，"),e("code",[s._v("HOC")]),s._v("、"),e("code",[s._v("Render Props")]),s._v("等基于组件组合的方案，相当于先把要复用的逻辑包装成组件，再利用组件复用机制实现逻辑复用，自然就受限于组件复用，因而出现扩展能力受限、"),e("code",[s._v("Ref")]),s._v("隔断、"),e("code",[s._v("Wrapper Hell")]),s._v("等问题，那么我们就需要有一种简单直接的代码复用方式，函数，将可复用逻辑抽离成函数应该是最直接、成本最低的代码复用方式，但对于状态逻辑，仍然需要通过一些抽象模式(如"),e("code",[s._v("Observable")]),s._v(")才能实现复用，这正是"),e("code",[s._v("Hooks")]),s._v("的思路，将函数作为最小的代码复用单元，同时内置一些模式以简化状态逻辑的复用。比起上面提到的其它方案，"),e("code",[s._v("Hooks")]),s._v("让组件内逻辑复用不再与组件复用捆绑在一起，是真正在从下层去尝试解决(组件间)细粒度逻辑的复用问题此外，这种声明式逻辑复用方案将组件间的显式数据流与组合思想进一步延伸到了组件内。")]),s._v(" "),e("p",[s._v("对于使用"),e("code",[s._v("React Hooks")]),s._v("的动机，官方解释如下："),e("br"),s._v(" "),e("code",[s._v("Hooks")]),s._v("解决了我们在过去五年来编写和维护"),e("code",[s._v("react")]),s._v("遇到的各种看似不相关的问题，不论你是否正在学习"),e("code",[s._v("react")]),s._v("，每天都在使用它，甚至是你只是在使用一些与"),e("code",[s._v("React")]),s._v("具有相似组件模型的框架，你或多或少都会注意到这些问题。"),e("br"),s._v("\n跨组件复用含状态的逻辑"),e("code",[s._v("stateful logic")]),s._v("十分困难:"),e("br"),s._v(" "),e("code",[s._v("React")]),s._v("没有提供一种将复用行为绑定"),e("code",[s._v("attach")]),s._v("到组件的方法，比如将其连接到"),e("code",[s._v("store")]),s._v("，类似"),e("code",[s._v("redux")]),s._v("这类状态管理库的"),e("code",[s._v("connect")]),s._v("方法，如果您已经使用"),e("code",[s._v("React")]),s._v("一段时间，您可能熟悉通过"),e("code",[s._v("render props")]),s._v("和"),e("code",[s._v("higher-order")]),s._v("高阶组件等模式，来试图解决这些问题，但是这些模式要求您在使用它们时重构组件，这可能很麻烦并且使代码难以为继，使用"),e("code",[s._v("Hooks")]),s._v("，您可以从组件中提取有状态的逻辑，以便可以独立测试并重复使用，如果你在"),e("code",[s._v("React DevTools")]),s._v("中看到一个典型的"),e("code",[s._v("React")]),s._v("应用程序，你可能会发现一个由包含"),e("code",[s._v("providers, consumers")]),s._v("消费者，"),e("code",[s._v("higher-order")]),s._v("高阶组件，"),e("code",[s._v("render props")]),s._v("和其他抽象层的组件组成的包装器地狱，虽然我们可以在"),e("code",[s._v("DevTools")]),s._v("中过滤它们，但这反应出一个更深层次的问题："),e("code",[s._v("React")]),s._v("需要一个更好的原生方法来共享"),e("code",[s._v("stateful logic")]),s._v("。使用"),e("code",[s._v("Hooks")]),s._v("，你可以把含有"),e("code",[s._v("state")]),s._v("的逻辑从组件中提取抽象出来，以便于独立测试和复用，同时，"),e("code",[s._v("Hooks")]),s._v("允许您在不更改组件结构的情况下重用有状态的逻辑，这样就可以轻松地在许多组件之间或与社区共享"),e("code",[s._v("Hook")]),s._v("。"),e("br"),s._v("\n复杂的组件变得难以理解:"),e("br"),s._v("\n我们往往不得不维护一个在开始十分简单，但却慢慢演变成了一个无法管理的"),e("code",[s._v("stateful logic")]),s._v("含有"),e("code",[s._v("state")]),s._v("逻辑的混乱的和一堆含有副作用的组件，随着开发的深入它们会变得越来越大、越来越混乱，各种逻辑在组件中散落的到处都是，每个生命周期钩子中都包含了一堆互不相关的逻辑。比如，我们的组件可能会在"),e("code",[s._v("componentDidMount")]),s._v("和"),e("code",[s._v("componentDidUpdate")]),s._v("中执行一些数据拉取的工作，但是在相同的"),e("code",[s._v("componentDidMount")]),s._v("方法可能还包含一些无关逻辑，比如设置事件监听(之后需要在"),e("code",[s._v("componentWillUnmount")]),s._v("中清除)，一起更改的相互关联的代码被拆分，但完全不相关的代码最终组合在一个方法中，这使得引入错误和不一致变得太容易了，最终的结果是强相关的代码被分离，反而是不相关的代码被组合在了一起，这显然会轻易的导致"),e("code",[s._v("bug")]),s._v("和异常，在许多情况下，我们也不太可能将这些组件分解成更小的组件，因为"),e("code",[s._v("stateful logic")]),s._v("到处都是，测试他们也很困难，这也是为什么很多人喜欢将"),e("code",[s._v("React")]),s._v("和状态管理的库组合使用的原因之一，但是这通常会引入太多的抽象，要求您在不同的文件之间跳转，并使得重用组件变得更加困难，为此，"),e("code",[s._v("Hooks")]),s._v("允许您根据相关的部分(例如设置订阅或获取数据)将一个组件拆分为更小的函数，而不是基于生命周期方法强制拆分，您还可以选择使用"),e("code",[s._v("reducer")]),s._v("管理组件的本地状态，以使其更具可预测性。"),e("br"),s._v("\n难以理解的"),e("code",[s._v("class")]),s._v(":"),e("br"),s._v("\n除了代码复用和代码管理会遇到困难外，我们还发现"),e("code",[s._v("class")]),s._v("是学习"),e("code",[s._v("React")]),s._v("的一大屏障，你必须去理解"),e("code",[s._v("JavaScript")]),s._v("中"),e("code",[s._v("this")]),s._v("的工作方式，这与其他语言存在巨大差异，还不能忘记绑定事件处理器，没有稳定的语法提案，这些代码非常冗余，大家可以很好地理解"),e("code",[s._v("props")]),s._v("、"),e("code",[s._v("state")]),s._v("和自顶向下的数据流，但对"),e("code",[s._v("class")]),s._v("却一筹莫展，即便在有经验的"),e("code",[s._v("React")]),s._v("开发者之间，对于函数组件与"),e("code",[s._v("class")]),s._v("组件的差异也存在分歧，甚至还要区分两种组件的使用场景，另外，"),e("code",[s._v("React")]),s._v("已经发布五年了，我们希望它能在下一个五年也与时俱进，就像"),e("code",[s._v("Svelte")]),s._v("、"),e("code",[s._v("Angular")]),s._v("、"),e("code",[s._v("Glimmer")]),s._v("等其它的库展示的那样，组件预编译会带来巨大的潜力，尤其是在它不局限于模板的时候。最近，我们一直在使用"),e("code",[s._v("Prepack")]),s._v("来试验"),e("code",[s._v("component folding")]),s._v("，也取得了初步成效，但是我们发现使用"),e("code",[s._v("class")]),s._v("组件会无意中鼓励开发者使用一些让优化措施无效的方案，"),e("code",[s._v("class")]),s._v("也给目前的工具带来了一些问题，例如，"),e("code",[s._v("class")]),s._v("不能很好的压缩，并且会使热重载出现不稳定的情况，因此，我们想提供一个使代码更易于优化的"),e("code",[s._v("API")]),s._v("，为了解决这些问题，"),e("code",[s._v("Hook")]),s._v("使你在非"),e("code",[s._v("class")]),s._v("的情况下可以使用更多的"),e("code",[s._v("React")]),s._v("特性，从概念上讲，"),e("code",[s._v("React")]),s._v("组件一直更像是函数，而"),e("code",[s._v("Hook")]),s._v("则拥抱了函数，同时也没有牺牲"),e("code",[s._v("React")]),s._v("的精神原则，"),e("code",[s._v("Hook")]),s._v("提供了问题的解决方案，无需学习复杂的函数式或响应式编程技术。")]),s._v(" "),e("h2",{attrs:{id:"usestate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usestate"}},[s._v("#")]),s._v(" useState")]),s._v(" "),e("p",[s._v("最简单的"),e("code",[s._v("useState")]),s._v("的使用如下"),e("code",[s._v("https://codesandbox.io/s/fancy-dust-kbd1i?file=/src/App.tsx")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// App.tsx\nimport { useState } from "react";\nimport "./styles.css";\n\nexport default function App() {\n  const [count, setCount] = useState(0);\n\n  console.log("refresh");\n  const addCount = () => setCount(count + 1);\n\n  return (\n    <>\n      <div>{count}</div>\n      <button onClick={addCount}>Count++</button>\n    </>\n  );\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("当页面在首次渲染时会"),e("code",[s._v("render")]),s._v("渲染"),e("code",[s._v("<App />")]),s._v("函数组件，其实际上是调用"),e("code",[s._v("App()")]),s._v("方法，得到虚拟"),e("code",[s._v("DOM")]),s._v("元素，并将其渲染到浏览器页面上，当用户点击"),e("code",[s._v("button")]),s._v("按钮时会调用"),e("code",[s._v("addCount")]),s._v("方法，然后再进行一次"),e("code",[s._v("render")]),s._v("渲染"),e("code",[s._v("<App />")]),s._v("函数组件，其实际上还是调用了"),e("code",[s._v("App()")]),s._v("方法并传递了"),e("code",[s._v("props")]),s._v("参数，得到一个新的虚拟"),e("code",[s._v("DOM")]),s._v("元素，然后"),e("code",[s._v("React")]),s._v("会执行"),e("code",[s._v("DOM diff")]),s._v("算法，将改变的部分更新到浏览器的页面上。也就是说，实际上每次"),e("code",[s._v("setCount")]),s._v("都会重新执行这个"),e("code",[s._v("App()")]),s._v("函数，这个可以通过"),e("code",[s._v('console.log("refresh")')]),s._v("那一行看到效果，每次点击按钮控制台都会打印"),e("code",[s._v("refresh")]),s._v("。"),e("br"),s._v("\n那么问题来了，页面首次渲染和进行"),e("code",[s._v("+1")]),s._v("操作，都会调用"),e("code",[s._v("App()")]),s._v("函数去执行"),e("code",[s._v("const [count, setCount] = useState(0);")]),s._v("这行代码，那它是怎么做到在"),e("code",[s._v("+ +")]),s._v("操作后，第二次渲染时执行同样的代码，却不对变量"),e("code",[s._v("n")]),s._v("进行初始化也就是一直为"),e("code",[s._v("0")]),s._v("，而是拿到"),e("code",[s._v("n")]),s._v("的最新值。"),e("br"),s._v("\n考虑到上边这个问题，我们可以简单实现一个"),e("code",[s._v("useMyState")]),s._v("函数，上边在"),e("code",[s._v("Hooks")]),s._v("为什么称为"),e("code",[s._v("Hooks")]),s._v("这个问题上提到了可以勾过来一个函数作用域的问题，那么我们也完全可以实现一个"),e("code",[s._v("Hooks")]),s._v("去勾过来一个作用域，简单来说就是在"),e("code",[s._v("useMyState")]),s._v("里边保存一个变量，也就是一个闭包里边保存了这个变量，然后这个变量保存了上次的值，再次调用的时候直接取出这个之前保存的值即可，"),e("code",[s._v("https://codesandbox.io/s/fancy-dust-kbd1i?file=/src/use-my-state-version-1.ts")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// index.tsx\nimport { render } from "react-dom";\nimport App from "./App";\n\n// 改造一下让其导出 让我们能够强行刷新`<App />`\nexport const forceRefresh = () => {\n  console.log("Force fresh <App />");\n  const rootElement = document.getElementById("root");\n  render(<App />, rootElement);\n};\n\nforceRefresh();\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// use-my-state-version-1.ts\nimport { forceRefresh } from "./index";\n\nlet saveState: any = null;\n\nexport function useMyState<T>(state: T): [T, (newState: T) => void] {\n  saveState = saveState || state;\n  const rtnState: T = saveState;\n  const setState = (newState: T): void => {\n    saveState = newState;\n    forceRefresh();\n  };\n  return [rtnState, setState];\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// App.tsx\nimport { useMyState } from "./use-my-state-version-1";\nimport "./styles.css";\n\nexport default function App() {\n  const [count, setCount] = useMyState(0);\n\n  console.log("refresh");\n  const addCount = () => setCount(count + 1);\n\n  return (\n    <>\n      <div>{count}</div>\n      <button onClick={addCount}>Count++</button>\n    </>\n  );\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("可以在"),e("code",[s._v("code sandbox")]),s._v("中看到现在已经可以实现点击按钮进行"),e("code",[s._v("++")]),s._v("操作了，而不是无论怎么点击都是"),e("code",[s._v("0")]),s._v("，但是上边的情况太过于简单，因为只有一个"),e("code",[s._v("state")]),s._v("，如果使用多个变量，那就需要调用两次"),e("code",[s._v("useState")]),s._v("，我们就需要对其进行一下改进了，不然会造成多个变量存在一个"),e("code",[s._v("saveState")]),s._v("中，这样会产生冲突覆盖的问题，改进思路有两种:"),e("code",[s._v("1")]),s._v("把做成一个对象，比如"),e("code",[s._v("saveState = { n:0, m:0 }")]),s._v("，这种方式不太符合需求，因为在使用"),e("code",[s._v("useState")]),s._v("的时候只会传递一个初始值参数，不会传递名称; "),e("code",[s._v("2")]),s._v("把"),e("code",[s._v("saveState")]),s._v("做成一个数组，比如"),e("code",[s._v("saveState:[0, 0]")]),s._v("。实际上"),e("code",[s._v("React")]),s._v("中是通过类似单链表的形式来代替数组的，通过"),e("code",[s._v("next")]),s._v("按顺序串联所有的"),e("code",[s._v("hook")]),s._v("，使用数组也是一种类似的操作，因为两者都依赖于定义"),e("code",[s._v("Hooks")]),s._v("的顺序，"),e("code",[s._v("https://codesandbox.io/s/fancy-dust-kbd1i?file=/src/use-my-state-version-2.ts")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// index.tsx\nimport { render } from "react-dom";\nimport App from "./App";\n\n// 改造一下让其导出 让我们能够强行刷新`<App />`\nexport const forceRefresh = () => {\n  console.log("Force fresh <App />");\n  const rootElement = document.getElementById("root");\n  render(<App />, rootElement);\n};\n\nforceRefresh();\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// use-my-state-version-2.ts\nimport { forceRefresh } from "./index";\n\nlet saveState: any[] = [];\nlet index: number = 0;\n\nexport function useMyState<T>(state: T): [T, (newState: T) => void] {\n  const curIndex = index;\n  index++;\n  saveState[curIndex] = saveState[curIndex] || state;\n  const rtnState: T = saveState[curIndex];\n  const setState = (newState: T): void => {\n    saveState[curIndex] = newState;\n    index = 0; // 必须在渲染前后将`index`值重置为`0` 不然就无法借助调用顺序确定`Hooks`了\n    forceRefresh();\n  };\n  return [rtnState, setState];\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// App.tsx\nimport { useMyState } from "./use-my-state-version-2";\nimport "./styles.css";\n\nexport default function App() {\n  const [count1, setCount1] = useMyState(0);\n  const [count2, setCount2] = useMyState(0);\n\n  console.log("refresh");\n  const addCount1 = () => setCount1(count1 + 1);\n  const addCount2 = () => setCount2(count2 + 1);\n\n  return (\n    <>\n      <div>{count1}</div>\n      <button onClick={addCount1}>Count1++</button>\n      <div>{count2}</div>\n      <button onClick={addCount2}>Count2++</button>\n    </>\n  );\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("p",[s._v("可以看到已经可以实现在多个"),e("code",[s._v("State")]),s._v("下的独立的状态更新了，那么问题又又来了，"),e("code",[s._v("<App />")]),s._v("用了"),e("code",[s._v("saveState")]),s._v("和"),e("code",[s._v("index")]),s._v("，那其他组件用什么，也就是说多个组件如果解决每个组件独立的作用域，解决办法"),e("code",[s._v("1")]),s._v("每个组件都创建一个"),e("code",[s._v("saveState")]),s._v("和"),e("code",[s._v("index")]),s._v("，但是几个组件在一个文件中又会导致"),e("code",[s._v("saveState")]),s._v("、"),e("code",[s._v("index")]),s._v("冲突。解决办法"),e("code",[s._v("2")]),s._v("放在组件对应的虚拟节点对象上，"),e("code",[s._v("React")]),s._v("采用的也是这种方案，将"),e("code",[s._v("saveState")]),s._v("和"),e("code",[s._v("index")]),s._v("变量放在组件对应的虚拟节点对象"),e("code",[s._v("FiberNode")]),s._v("上，在"),e("code",[s._v("React")]),s._v("中具体实现"),e("code",[s._v("saveState")]),s._v("叫做"),e("code",[s._v("memoizedState")]),s._v("，实际上"),e("code",[s._v("React")]),s._v("中是通过类似单链表的形式来代替数组的，通过"),e("code",[s._v("next")]),s._v("按顺序串联所有的"),e("code",[s._v("hook")]),s._v("。"),e("br"),s._v("\n可以看出"),e("code",[s._v("useState")]),s._v("是强依赖于定义的顺序的，"),e("code",[s._v("useState")]),s._v("数组中保存的顺序非常重要在执行函数组件的时候可以通过下标的自增获取对应的"),e("code",[s._v("state")]),s._v("值，由于是通过顺序获取的，这将会强制要求你不允许更改"),e("code",[s._v("useState")]),s._v("的顺序，例如使用条件判断是否执行"),e("code",[s._v("useState")]),s._v("这样会导致按顺序获取到的值与预期的值不同，这个问题也出现在了"),e("code",[s._v("React.useState")]),s._v("自己身上，因此"),e("code",[s._v("React")]),s._v("是不允许你使用条件判断去控制函数组件中的"),e("code",[s._v("useState")]),s._v("的顺序的，这会导致获取到的值混乱，类似于下边的代码则会抛出异常。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('const App = () => {\n    let state;\n    if(true){\n        [state, setState] = React.useState(0);\n    }\n    return (\n        <div>{state}</div>\n    )\n}\n\n\x3c!-- React Hook "React.useState" is called conditionally. React Hooks must be called in the exact same order in every component render  react-hooks/rules-of-hooks--\x3e\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("这里当然只是对于"),e("code",[s._v("useState")]),s._v("的简单实现，对于"),e("code",[s._v("React")]),s._v("真正的实现可以参考"),e("code",[s._v("packages/react-reconciler/src/ReactFiberHooks.js")]),s._v("，当前的"),e("code",[s._v("React")]),s._v("版本是"),e("code",[s._v("16.10.2")]),s._v("，也可以简略看一下相关的"),e("code",[s._v("type")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language-ts line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Hooks")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  memoizedState"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("any")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指向当前渲染节点`Fiber` 上一次完整更新之后的最终状态值")]),s._v("\n  baseState"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("any")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始化`initialState` 已经每次`dispatch`之后`newState`")]),s._v("\n  baseUpdate"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Update"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("any")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当前需要更新的`Update` 每次更新完之后会赋值上一个`update` 方便`react`在渲染错误的边缘数据回溯")]),s._v("\n  queue"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" UpdateQueue"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("any")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 缓存的更新队列 存储多次更新行为")]),s._v("\n  next"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Hook "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// `link`到下一个`hooks` 通过`next`串联所有`hooks`")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h2",{attrs:{id:"每日一题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#每日一题"}},[s._v("#")]),s._v(" 每日一题")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("https://github.com/WindrunnerMax/EveryDay\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("https://juejin.cn/post/6963559556366467102\nhttps://juejin.cn/post/6944908787375734791\nhttps://juejin.cn/post/6844903990958784526\nhttps://juejin.cn/post/6865473218414247944\nhttps://juejin.cn/post/6844903999083118606\nhttps://github.com/brickspert/blog/issues/26\nhttps://react.docschina.org/docs/hooks-state.html\nhttps://jelly.jd.com/article/61aed4a97f05d46ce6b791f4\nhttps://blog.csdn.net/Marker__/article/details/105593118\nhttps://www.ruanyifeng.com/blog/2019/09/react-hooks.html\nhttps://react.docschina.org/docs/hooks-faq.html#how-does-react-associate-hook-calls-with-components\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])])])}),[],!1,null,null,null);e.default=a.exports}}]);