(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{518:function(t,s,e){"use strict";e.r(s);var a=e(0),n=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"js中regexp对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js中regexp对象"}},[t._v("#")]),t._v(" Js中RegExp对象")]),t._v(" "),s("p",[s("code",[t._v("RegExp")]),t._v("对象表示正则表达式，是由普通字符和特殊字符也叫元字符或限定符组成的文字模板，用于对字符串执行模式匹配。")]),t._v(" "),s("h2",{attrs:{id:"描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),s("p",[t._v("创建一个"),s("code",[t._v("RegExp")]),t._v("对象通常有两种方式，一种是通过字面量创建，一种是通过"),s("code",[t._v("RegExp")]),t._v("对象构造函数创建。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// var regex = /pattern/modifiers;")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[0-9]+$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// var regex = new RegExp("pattern", "modifiers");')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^[0-9]+$"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"g"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("其中模式"),s("code",[t._v("pattern")]),t._v("描述了表达式的模式，修饰符"),s("code",[t._v("modifiers")]),t._v("用于指定全局匹配、区分大小写的匹配和多行匹配等等。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("i")]),t._v(": 表示执行对大小写不敏感的匹配。")]),t._v(" "),s("li",[s("code",[t._v("g")]),t._v(": 表示执行全局匹配即查找所有匹配而非在找到第一个匹配后停止。")]),t._v(" "),s("li",[s("code",[t._v("m")]),t._v(": 表示执行多行匹配。")]),t._v(" "),s("li",[s("code",[t._v("s")]),t._v(": 表示特殊字符圆点"),s("code",[t._v(".")]),t._v("中包含换行符，默认"),s("code",[t._v(".")]),t._v("是匹配除换行符"),s("code",[t._v("\\n")]),t._v("之外的任何单字符，加上"),s("code",[t._v("s")]),t._v("之后"),s("code",[t._v(".")]),t._v("中包含换行符。")]),t._v(" "),s("li",[s("code",[t._v("y")]),t._v(": 表示搜索是否具有粘性，仅从正则表达式的"),s("code",[t._v("lastIndex")]),t._v("属性表示的索引处搜索。")]),t._v(" "),s("li",[s("code",[t._v("u")]),t._v(": "),s("code",[t._v("Unicode")]),t._v("模式，用来正确处理大于"),s("code",[t._v("\\uFFFF")]),t._v("的"),s("code",[t._v("Unicode")]),t._v("字符，也就是说能够正确处理"),s("code",[t._v("UTF-16")]),t._v("编码。")])]),t._v(" "),s("h3",{attrs:{id:"regexp-prototype-compile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-compile"}},[t._v("#")]),t._v(" RegExp.prototype.compile()")]),t._v(" "),s("p",[s("code",[t._v("regexObj.compile(pattern, flags)")]),s("br"),t._v(" "),s("code",[t._v("compile()")]),t._v("方法被用于在脚本执行过程中重新编译正则表达式，但是该特性已经从"),s("code",[t._v("Web")]),t._v("标准中删除，不推荐"),s("code",[t._v("compile()")]),t._v("方法，可以使用"),s("code",[t._v("RegExp")]),t._v("构造函数来得到相同效果。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[0-9]+$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nregex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^[0-9]+$"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// /^[0-9]+$/i")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"regexp-prototype-exec"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-exec"}},[t._v("#")]),t._v(" RegExp.prototype.exec()")]),t._v(" "),s("p",[s("code",[t._v("regexObj.exec(str)")]),s("br"),t._v(" "),s("code",[t._v("exec()")]),t._v("方法在一个指定字符串中执行一个搜索匹配，返回一个结果数组或"),s("code",[t._v("null")]),t._v("，在设置了"),s("code",[t._v("global")]),t._v("或"),s("code",[t._v("sticky")]),t._v("标志位的情况下，"),s("code",[t._v("RegExp")]),t._v("对象是有状态的，其会将上次成功匹配后的位置记录在"),s("code",[t._v("lastIndex")]),t._v("属性中，使用此特性"),s("code",[t._v("exec()")]),t._v("可用来对单个字符串中的多次匹配结果进行逐条的遍历包括捕获到的匹配，而相比之下"),s("code",[t._v("String.prototype.match()")]),t._v("只会返回匹配到的结果。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d{4})-(\\d{2})-(\\d{2})")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2020-09-02"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["2020-09-02", "2020", "09", "02", index: 0, input: "2020-09-02", ... ]')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进行一次完整的全局正则匹配需要使用RegExp.prototype.exec()或String.prototype.matchAll()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为当使用String.prototype.match()和/g标志方式获取匹配信息时，捕获组会被忽略。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("regMatch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"g"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"g"')]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 必须加入g修饰符 否则会陷入死循环")]),t._v("\n    regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("h3",{attrs:{id:"regexp-prototype-test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-test"}},[t._v("#")]),t._v(" RegExp.prototype.test()")]),t._v(" "),s("p",[s("code",[t._v("regexObj.test(str)")]),s("br"),t._v(" "),s("code",[t._v("test()")]),t._v("方法执行一个检索，用来查看正则表达式与指定的字符串是否匹配，返回"),s("code",[t._v("true")]),t._v("或"),s("code",[t._v("false")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[0-9]+$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"string-prototype-search"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-search"}},[t._v("#")]),t._v(" String.prototype.search()")]),t._v(" "),s("p",[s("code",[t._v("str.search(regexp)")]),s("br"),t._v(" "),s("code",[t._v("search()")]),t._v("方法执行正则表达式和"),s("code",[t._v("String")]),t._v("对象之间的一个搜索匹配，如果传入一个非正则表达式对象"),s("code",[t._v("regexp")]),t._v("，则会使用"),s("code",[t._v("new RegExp(regexp)")]),t._v("隐式地将其转换为正则表达式对象，如果匹配成功，则"),s("code",[t._v("search()")]),t._v("返回正则表达式在字符串中首次匹配项的索引，否则返回"),s("code",[t._v("-1")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[0-9]+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"s123"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"string-prototype-match"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-match"}},[t._v("#")]),t._v(" String.prototype.match()")]),t._v(" "),s("p",[s("code",[t._v("str.match(regexp)")]),s("br"),t._v(" "),s("code",[t._v("match()")]),t._v("方法检索返回一个字符串匹配正则表达式的结果，如果传入一个非正则表达式对象，则会隐式地使用"),s("code",[t._v("new RegExp(obj)")]),t._v("将其转换为一个"),s("code",[t._v("RegExp")]),t._v("，如果没有给出任何参数并直接使用"),s("code",[t._v("match()")]),t._v("方法 ，将会得到一个包含空字符串的"),s("code",[t._v("Array")]),t._v("即"),s("code",[t._v('[""]')]),t._v("，如果使用"),s("code",[t._v("g")]),t._v("标志，则将返回与完整正则表达式匹配的所有结果，但不会返回捕获组，如果未使用"),s("code",[t._v("g")]),t._v("标志，则仅返回第一个完整匹配及其相关的捕获组"),s("code",[t._v("Array")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d{4})-(\\d{2})-(\\d{2})")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2020-09-02"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["2020-09-02"]')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"string-prototype-matchall"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-matchall"}},[t._v("#")]),t._v(" String.prototype.matchAll()")]),t._v(" "),s("p",[s("code",[t._v("str.matchAll(regexp)")]),s("br"),t._v(" "),s("code",[t._v("matchAll()")]),t._v("方法返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器，如果传入一个非正则表达式对象，则会隐式地使用"),s("code",[t._v("new RegExp(obj)")]),t._v("将其转换为一个"),s("code",[t._v("RegExp")]),t._v("，传入的"),s("code",[t._v("RegExp")]),t._v("必须是设置了全局模式"),s("code",[t._v("g")]),t._v("的形式，否则会抛出异常"),s("code",[t._v("TypeError")]),t._v("，返回一个迭代器，不可重用，结果耗尽需要再次调用方法，获取一个新的迭代器。"),s("code",[t._v("matchAll")]),t._v("内部做了一个"),s("code",[t._v("regexp")]),t._v("的复制，所以不像"),s("code",[t._v("regexp.exec")]),t._v(","),s("code",[t._v("lastIndex")]),t._v("在字符串扫描时不会改变。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d{4})-(\\d{2})-(\\d{2})")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2020-09-02"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("matchAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用Spread操作符展开 也可以调用next()方法进行迭代")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// [["2020-09-02", "2020", "09", "02", index: 0, input: "2020-09-02", ... ]]')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"string-prototype-replace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-replace"}},[t._v("#")]),t._v(" String.prototype.replace()")]),t._v(" "),s("p",[s("code",[t._v("str.replace(regexp|substr, newSubStr|function)")]),s("br"),t._v(" "),s("code",[t._v("replace()")]),t._v("方法返回一个由替换值"),s("code",[t._v("replacement")]),t._v("替换部分或所有的模式"),s("code",[t._v("pattern")]),t._v("匹配项后的新字符串，模式可以是一个字符串或者一个正则表达式，替换值可以是一个字符串或者一个每次匹配都要调用的回调函数，如果"),s("code",[t._v("pattern")]),t._v("是字符串，则仅替换第一个匹配项，原字符串不会改变。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"s1s11s111"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sss")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"string-prototype-split"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-split"}},[t._v("#")]),t._v(" String.prototype.split()")]),t._v(" "),s("p",[s("code",[t._v("str.split([separator[, limit]])")]),s("br"),t._v(" "),s("code",[t._v("split()")]),t._v("方法使用指定的分隔符字符串将一个"),s("code",[t._v("String")]),t._v("对象分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置，"),s("code",[t._v("separator")]),t._v("指定表示每个拆分应发生的点的字符串，"),s("code",[t._v("separator")]),t._v("可以是一个字符串或正则表达式，"),s("code",[t._v("limit")]),t._v("提供一个整数，限定返回的分割片段数量，返回源字符串以分隔符出现位置分隔而成的一个"),s("code",[t._v("Array")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以数字分割")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2020-09-02"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["", "-", "-", ""]')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("get RegExp[@@species]")]),t._v(": 静态属性，"),s("code",[t._v("RegExp[@@species]")]),t._v("访问器属性返回"),s("code",[t._v("RegExp")]),t._v("的构造器。")]),t._v(" "),s("li",[s("code",[t._v("RegExp.lastIndex")]),t._v(": "),s("code",[t._v("lastIndex")]),t._v("是正则表达式的一个可读可写的整型属性，用来指定下一次匹配的起始索引。")]),t._v(" "),s("li",[s("code",[t._v("RegExp.prototype.flags")]),t._v(": "),s("code",[t._v("flags")]),t._v("属性返回一个字符串，由当前正则表达式对象的标志组成。")]),t._v(" "),s("li",[s("code",[t._v("RegExp.prototype.dotAll")]),t._v(": "),s("code",[t._v("dotAll")]),t._v("属性表明是否在正则表达式中一起使用"),s("code",[t._v("s")]),t._v("修饰符。")]),t._v(" "),s("li",[s("code",[t._v("RegExp.prototype.global")]),t._v(": "),s("code",[t._v("global")]),t._v("属性表明正则表达式是否使用了"),s("code",[t._v("g")]),t._v("修饰符。")]),t._v(" "),s("li",[s("code",[t._v("RegExp.prototype.ignoreCase")]),t._v(": "),s("code",[t._v("ignoreCase")]),t._v("属性表明正则表达式是否使用了"),s("code",[t._v("i")]),t._v("修饰符。")]),t._v(" "),s("li",[s("code",[t._v("RegExp.prototype.multiline")]),t._v(": "),s("code",[t._v("multiline")]),t._v("属性表明正则表达式是否使用了"),s("code",[t._v("m")]),t._v("修饰符。")]),t._v(" "),s("li",[s("code",[t._v("RegExp.prototype.source")]),t._v(":\n"),s("code",[t._v("source")]),t._v("属性返回一个值为当前正则表达式对象的模式文本的字符串。")]),t._v(" "),s("li",[s("code",[t._v("RegExp.prototype.sticky")]),t._v(": "),s("code",[t._v("sticky")]),t._v("属性表明正则表达式是否使用了"),s("code",[t._v("y")]),t._v("修饰符。")]),t._v(" "),s("li",[s("code",[t._v("RegExp.prototype.unicode")]),t._v(": "),s("code",[t._v("unicode")]),t._v("属性表明正则表达式带有"),s("code",[t._v("u")]),t._v("修饰符。")])]),t._v(" "),s("h2",{attrs:{id:"方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),s("h3",{attrs:{id:"regexp-prototype-compile-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-compile-2"}},[t._v("#")]),t._v(" RegExp.prototype.compile()")]),t._v(" "),s("p",[s("code",[t._v("regexObj.compile(pattern, flags)")]),s("br"),t._v(" "),s("code",[t._v("compile()")]),t._v("方法被用于在脚本执行过程中重新编译正则表达式，但是该特性已经从"),s("code",[t._v("Web")]),t._v("标准中删除，不推荐"),s("code",[t._v("compile()")]),t._v("方法，可以使用"),s("code",[t._v("RegExp")]),t._v("构造函数来得到相同效果。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[0-9]+$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nregex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^[0-9]+$"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// /^[0-9]+$/i")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"regexp-prototype-exec-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-exec-2"}},[t._v("#")]),t._v(" RegExp.prototype.exec()")]),t._v(" "),s("p",[s("code",[t._v("regexObj.exec(str)")]),s("br"),t._v(" "),s("code",[t._v("exec()")]),t._v("方法在一个指定字符串中执行一个搜索匹配，返回一个结果数组或"),s("code",[t._v("null")]),t._v("，在设置了"),s("code",[t._v("global")]),t._v("或"),s("code",[t._v("sticky")]),t._v("标志位的情况下，"),s("code",[t._v("RegExp")]),t._v("对象是有状态的，其会将上次成功匹配后的位置记录在"),s("code",[t._v("lastIndex")]),t._v("属性中，使用此特性"),s("code",[t._v("exec()")]),t._v("可用来对单个字符串中的多次匹配结果进行逐条的遍历包括捕获到的匹配，而相比之下"),s("code",[t._v("String.prototype.match()")]),t._v("只会返回匹配到的结果。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d{4})-(\\d{2})-(\\d{2})")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2020-09-02"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["2020-09-02", "2020", "09", "02", index: 0, input: "2020-09-02", ... ]')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进行一次完整的全局正则匹配需要使用RegExp.prototype.exec()或String.prototype.matchAll()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为当使用String.prototype.match()和/g标志方式获取匹配信息时，捕获组会被忽略。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("regMatch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"g"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"g"')]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 必须加入g修饰符 否则会陷入死循环")]),t._v("\n    regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("h3",{attrs:{id:"regexp-prototype-test-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-test-2"}},[t._v("#")]),t._v(" RegExp.prototype.test()")]),t._v(" "),s("p",[s("code",[t._v("regexObj.test(str)")]),s("br"),t._v(" "),s("code",[t._v("test()")]),t._v("方法执行一个检索，用来查看正则表达式与指定的字符串是否匹配，返回"),s("code",[t._v("true")]),t._v("或"),s("code",[t._v("false")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[0-9]+$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"regexp-prototype-match"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-match"}},[t._v("#")]),t._v(" RegExp.prototype[@@match]()")]),t._v(" "),s("p",[s("code",[t._v("regexp[Symbol.match](str)")]),s("br"),t._v("\n对正则表达式匹配字符串时，"),s("code",[t._v("[@@match]()")]),t._v("方法用于获取匹配结果，这个方法的使用方式和"),s("code",[t._v("String.prototype.match()")]),t._v("相同，不同之处是"),s("code",[t._v("this")]),t._v("和参数顺序。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d{4})-(\\d{2})-(\\d{2})")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("match"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2020-09-02"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["2020-09-02"]')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"regexp-prototype-matchall"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-matchall"}},[t._v("#")]),t._v(" RegExp.prototype[@@matchAll]()")]),t._v(" "),s("p",[s("code",[t._v("regexp[Symbol.matchAll](str)")]),s("br"),t._v(" "),s("code",[t._v("[@@matchAll]")]),t._v("方法返回对字符串使用正则表达式的所有匹配项，这个方法的使用方式和"),s("code",[t._v("String.prototype.matchAll()")]),t._v("相同，不同之处是"),s("code",[t._v("this")]),t._v("和参数顺序。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d{4})-(\\d{2})-(\\d{2})")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("matchAll"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2020-09-02"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// // [["2020-09-02", "2020", "09", "02", index: 0, input: "2020-09-02", ... ]]')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"regexp-prototype-replace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-replace"}},[t._v("#")]),t._v(" RegExp.prototype[@@replace]()")]),t._v(" "),s("p",[s("code",[t._v("regexp[Symbol.replace](str, newSubStr|function)")]),s("br"),t._v(" "),s("code",[t._v("[@@replace]()")]),t._v("方法会在一个字符串中用给定的替换器，替换所有符合正则模式的匹配项，并返回替换后的新字符串结果，用来替换的参数可以是一个字符串或是一个针对每次匹配的回调函数，这个方法基本可以和"),s("code",[t._v("String.prototype.replace()")]),t._v("一样使用，不同之处是"),s("code",[t._v("this")]),t._v("和参数顺序。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("replace"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"s1s11s111"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sss")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"regexp-prototype-search"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-search"}},[t._v("#")]),t._v(" RegExp.prototype[@@search]()")]),t._v(" "),s("p",[s("code",[t._v("regexp[Symbol.search](str)")]),t._v(" "),s("code",[t._v("[@@search]()")]),t._v("方法执行了一个在给定字符串中的一个搜索以取得匹配正则模式的项，这个方法的使用方式和"),s("code",[t._v("String.prototype.search()")]),t._v("相同，不同之处是"),s("code",[t._v("this")]),t._v("和参数顺序。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("search"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"s1s11s111"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"regexp-prototype-split"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-split"}},[t._v("#")]),t._v(" RegExp.prototype[@@split]()")]),t._v(" "),s("p",[s("code",[t._v("[@@split]()")]),t._v("方法切割"),s("code",[t._v("String")]),t._v("对象为一个其子字符串的数组，这个方法的使用方式和 "),s("code",[t._v("String.prototype.split()")]),t._v("相同，不同之处是"),s("code",[t._v("this")]),t._v("和参数顺序。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2020-09-02"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["", "-", "-", ""]')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"regexp-prototype-tostring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-tostring"}},[t._v("#")]),t._v(" RegExp.prototype.toString()")]),t._v(" "),s("p",[s("code",[t._v("regexObj.toString()")]),s("br"),t._v("\ntoString() 返回一个表示该正则表达式的字符串。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// /\\d+/g")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h2",{attrs:{id:"正则规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则规则"}},[t._v("#")]),t._v(" 正则规则")]),t._v(" "),s("p",[t._v("元字符的规则列表以及它们在正则表达式上下文中的行为，该部分出自"),s("code",[t._v("https://www.runoob.com/regexp/regexp-metachar.html")]),t._v("。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("\\")]),t._v(": 将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符，例如"),s("code",[t._v("n")]),t._v("匹配字符"),s("code",[t._v("n")]),t._v("，"),s("code",[t._v("\\n")]),t._v("匹配一个换行符，序列"),s("code",[t._v("\\\\")]),t._v("匹配"),s("code",[t._v("\\")]),t._v("而"),s("code",[t._v("\\(")]),t._v("则匹配"),s("code",[t._v('("')]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("^")]),t._v(": 匹配输入字符串的开始位置，如果设置了"),s("code",[t._v("RegExp")]),t._v("对象的"),s("code",[t._v("Multiline")]),t._v("属性，"),s("code",[t._v("^")]),t._v("也匹配 "),s("code",[t._v("\\n")]),t._v("或"),s("code",[t._v("\\r")]),t._v("之后的位置。")]),t._v(" "),s("li",[s("code",[t._v("$")]),t._v(": 匹配输入字符串的结束位置，如果设置了"),s("code",[t._v("RegExp")]),t._v("对象的"),s("code",[t._v("Multiline")]),t._v("属性，"),s("code",[t._v("$")]),t._v("也匹配 "),s("code",[t._v("\\n")]),t._v("或"),s("code",[t._v("\\r")]),t._v("之前的位置。")]),t._v(" "),s("li",[s("code",[t._v("*")]),t._v(": 匹配前面的子表达式零次或多次，例如"),s("code",[t._v("zo*")]),t._v("能匹配"),s("code",[t._v("z")]),t._v("以及"),s("code",[t._v("zoo")]),t._v("，"),s("code",[t._v("*")]),t._v("等价于"),s("code",[t._v("{0,}")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("+")]),t._v(": 匹配前面的子表达式一次或多次，例如"),s("code",[t._v("zo+")]),t._v("能匹配"),s("code",[t._v("zo")]),t._v("以及"),s("code",[t._v("zoo")]),t._v("，但不能匹配"),s("code",[t._v("z")]),t._v("，"),s("code",[t._v("+")]),t._v("等价于"),s("code",[t._v("{1,}")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("?")]),t._v(": 匹配前面的子表达式零次或一次，例如"),s("code",[t._v("do(es)?")]),t._v("可以匹配"),s("code",[t._v("do")]),t._v("或"),s("code",[t._v("does")]),t._v("，"),s("code",[t._v("?")]),t._v("等价于"),s("code",[t._v("{0,1}")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("{n}")]),t._v(": "),s("code",[t._v("n")]),t._v("是一个非负整数，匹配确定的"),s("code",[t._v("n")]),t._v("次，例如"),s("code",[t._v("o{2}")]),t._v("不能匹配"),s("code",[t._v("Bob")]),t._v("中的"),s("code",[t._v("o")]),t._v("，但是能匹配"),s("code",[t._v("food")]),t._v("中的两个"),s("code",[t._v("o")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("{n,}")]),t._v(": "),s("code",[t._v("n")]),t._v("是一个非负整数，至少匹配"),s("code",[t._v("n")]),t._v("次，例如"),s("code",[t._v("o{2,}")]),t._v("不能匹配"),s("code",[t._v("Bob")]),t._v("中的"),s("code",[t._v("o")]),t._v("，但能匹配"),s("code",[t._v("foooood")]),t._v("中的所有"),s("code",[t._v("o")]),t._v("，"),s("code",[t._v("o{1,}")]),t._v("等价于"),s("code",[t._v("o+")]),t._v("，"),s("code",[t._v("o{0,}")]),t._v("则等价于"),s("code",[t._v("o*")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("{n,m}")]),t._v(": "),s("code",[t._v("m")]),t._v("和"),s("code",[t._v("n")]),t._v("均为非负整数，其中"),s("code",[t._v("n <= m")]),t._v("，最少匹配"),s("code",[t._v("n")]),t._v("次且最多匹配"),s("code",[t._v("m")]),t._v("次，例如"),s("code",[t._v("o{1,3}")]),t._v("将匹配"),s("code",[t._v("fooooood")]),t._v("中的前三个"),s("code",[t._v("o")]),t._v("，"),s("code",[t._v("o{0,1}")]),t._v("等价于"),s("code",[t._v("o?")]),t._v("，请注意在逗号和两个数之间不能有空格。")]),t._v(" "),s("li",[s("code",[t._v("?")]),t._v(": 当该字符紧跟在任何一个其他限制符"),s("code",[t._v("(*, +, ?, {n}, {n,}, {n,m})")]),t._v("后面时，匹配模式是非贪婪的，非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串，例如对于字符串"),s("code",[t._v("oooo")]),t._v("，"),s("code",[t._v("o+?")]),t._v("将匹配单个"),s("code",[t._v("o")]),t._v("，而"),s("code",[t._v("o+")]),t._v("将匹配所有"),s("code",[t._v("o")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v(".")]),t._v(": 匹配除换行符"),s("code",[t._v("(\\n、\\r)")]),t._v("之外的任何单个字符，要匹配包括"),s("code",[t._v("\\n")]),t._v("在内的任何字符，请使用像"),s("code",[t._v("(.|\\n)")]),t._v("的模式。")]),t._v(" "),s("li",[s("code",[t._v("(pattern)")]),t._v(": 匹配"),s("code",[t._v("pattern")]),t._v("并获取这一匹配，所获取的匹配可以从产生的"),s("code",[t._v("Matches")]),t._v("集合得到，在"),s("code",[t._v("VBScript")]),t._v("中使用"),s("code",[t._v("SubMatches")]),t._v("集合，在"),s("code",[t._v("JS")]),t._v("中则使用"),s("code",[t._v("$1…$9")]),t._v("属性，要匹配圆括号字符，请使用"),s("code",[t._v("\\(")]),t._v("或"),s("code",[t._v("\\)")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("(?:pattern)")]),t._v(": 匹配"),s("code",[t._v("pattern")]),t._v("但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用，这在使用字符"),s("code",[t._v("|")]),t._v("来组合一个模式的各个部分是很有用，例如"),s("code",[t._v("industr(?:y|ies)")]),t._v("就是一个比"),s("code",[t._v("industry|industries")]),t._v("更简略的表达式。")]),t._v(" "),s("li",[s("code",[t._v("(?=pattern)")]),t._v(": 正向肯定预查"),s("code",[t._v("look ahead positive assert")]),t._v("，在任何匹配"),s("code",[t._v("pattern")]),t._v("的字符串开始处匹配查找字符串，这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用，例如"),s("code",[t._v("Windows(?=95|98|NT|2000)")]),t._v("能匹配"),s("code",[t._v("Windows2000")]),t._v("中的"),s("code",[t._v("Windows")]),t._v("，但不能匹配"),s("code",[t._v("Windows3.1")]),t._v("中的"),s("code",[t._v("Windows")]),t._v("，预查不消耗字符，也就是说在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。")]),t._v(" "),s("li",[s("code",[t._v("(?!pattern)")]),t._v(": 正向否定预查"),s("code",[t._v("negative assert")]),t._v("，在任何不匹配"),s("code",[t._v("pattern")]),t._v("的字符串开始处匹配查找字符串，这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用，例如"),s("code",[t._v("Windows(?!95|98|NT|2000)")]),t._v("能匹配"),s("code",[t._v("Windows3.1")]),t._v("中的"),s("code",[t._v("Windows")]),t._v("，但不能匹配"),s("code",[t._v("Windows2000")]),t._v("中的"),s("code",[t._v("Windows")]),t._v("，预查不消耗字符，也就是说在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。")]),t._v(" "),s("li",[s("code",[t._v("(?<=pattern)")]),t._v(": 反向"),s("code",[t._v("look behind")]),t._v("肯定预查，与正向肯定预查类似，只是方向相反，例如"),s("code",[t._v("(?<=95|98|NT|2000)Windows")]),t._v("能匹配"),s("code",[t._v("2000Windows")]),t._v("中的"),s("code",[t._v("Windows")]),t._v("，但不能匹配"),s("code",[t._v("3.1Windows")]),t._v("中的"),s("code",[t._v("Windows")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("(?<!pattern)")]),t._v(": 反向否定预查，与正向否定预查类似，只是方向相反，例如"),s("code",[t._v("(?<!95|98|NT|2000)Windows")]),t._v("能匹配"),s("code",[t._v("3.1Windows")]),t._v("中的"),s("code",[t._v("Windows")]),t._v("，但不能匹配"),s("code",[t._v("2000Windows")]),t._v("中的"),s("code",[t._v("Windows")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("x|y")]),t._v(": 匹配"),s("code",[t._v("x")]),t._v("或"),s("code",[t._v("y")]),t._v("，例如"),s("code",[t._v("z|food")]),t._v("能匹配"),s("code",[t._v("z")]),t._v("或"),s("code",[t._v("food")]),t._v("，"),s("code",[t._v("(z|f)ood")]),t._v("则匹配"),s("code",[t._v("zood")]),t._v("或"),s("code",[t._v("food")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("[xyz]")]),t._v(": 字符集合，匹配所包含的任意一个字符，例如"),s("code",[t._v("[abc]")]),t._v("可以匹配"),s("code",[t._v("plain")]),t._v("中的"),s("code",[t._v("a")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("[^xyz]")]),t._v(": 负值字符集合。匹配未包含的任意字符，例如"),s("code",[t._v("[^abc]")]),t._v("可以匹配"),s("code",[t._v("plain")]),t._v("中的"),s("code",[t._v("p")]),t._v("、"),s("code",[t._v("l")]),t._v("、"),s("code",[t._v("i")]),t._v("、"),s("code",[t._v("n")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("[a-z]")]),t._v(": 字符范围，匹配指定范围内的任意字符，例如"),s("code",[t._v("[a-z]")]),t._v("可以匹配"),s("code",[t._v("a")]),t._v("到"),s("code",[t._v("z")]),t._v("范围内的任意小写字母字符。")]),t._v(" "),s("li",[s("code",[t._v("[^a-z]")]),t._v(": 负值字符范围，匹配任何不在指定范围内的任意字符，例如"),s("code",[t._v("[^a-z]")]),t._v("可以匹配任何不在"),s("code",[t._v("a")]),t._v("到"),s("code",[t._v("z")]),t._v("范围内的任意字符。")]),t._v(" "),s("li",[s("code",[t._v("\\b")]),t._v(": 匹配一个单词边界，也就是指单词和空格间的位置，例如"),s("code",[t._v("er\\b")]),t._v("可以匹配"),s("code",[t._v("never")]),t._v("中的 "),s("code",[t._v("er")]),t._v("，但不能匹配"),s("code",[t._v("verb")]),t._v("中的"),s("code",[t._v("er")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("\\B")]),t._v(": 匹配非单词边界，"),s("code",[t._v("er\\B")]),t._v("能匹配"),s("code",[t._v("verb")]),t._v("中的"),s("code",[t._v("er")]),t._v("，但不能匹配"),s("code",[t._v("never")]),t._v("中的"),s("code",[t._v("er")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("\\cx")]),t._v(": 匹配由"),s("code",[t._v("x")]),t._v("指明的控制字符,例如"),s("code",[t._v("\\cM")]),t._v("匹配一个"),s("code",[t._v("Control-M")]),t._v("或回车符,"),s("code",[t._v("x")]),t._v("的值必须为"),s("code",[t._v("A-Z")]),t._v("或"),s("code",[t._v("a-z")]),t._v("之一，否则将"),s("code",[t._v("c")]),t._v("视为一个原义的"),s("code",[t._v("c")]),t._v("字符。")]),t._v(" "),s("li",[s("code",[t._v("\\d")]),t._v(": 匹配一个数字字符，等价于"),s("code",[t._v("[0-9]")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("\\D")]),t._v(": 匹配一个非数字字符，等价于"),s("code",[t._v("[^0-9]")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("\\f")]),t._v(": 匹配一个换页符，等价于"),s("code",[t._v("\\x0c")]),t._v("和"),s("code",[t._v("\\cL")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("\\n")]),t._v(": 匹配一个换行符，等价于"),s("code",[t._v("\\x0a")]),t._v("和"),s("code",[t._v("\\cJ")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("\\r")]),t._v(": 匹配一个回车符，等价于"),s("code",[t._v("\\x0d")]),t._v("和"),s("code",[t._v("\\cM")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("\\s")]),t._v(": 匹配任何空白字符，包括空格、制表符、换页符等等，等价于"),s("code",[t._v("[ \\f\\n\\r\\t\\v]")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("\\S")]),t._v(": 匹配任何非空白字符，等价于"),s("code",[t._v("[^ \\f\\n\\r\\t\\v]")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("\\t")]),t._v(": 匹配一个制表符，等价于"),s("code",[t._v("\\x09")]),t._v("和"),s("code",[t._v("\\cI")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("\\v")]),t._v(": 匹配一个垂直制表符，等价于"),s("code",[t._v("\\x0b")]),t._v("和"),s("code",[t._v("\\cK")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("\\w")]),t._v(": 匹配字母、数字、下划线，等价于"),s("code",[t._v("[A-Za-z0-9_]")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("\\W")]),t._v(": 匹配非字母、数字、下划线，等价于"),s("code",[t._v("[^A-Za-z0-9_]")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("\\xn")]),t._v(": 匹配"),s("code",[t._v("n")]),t._v("，其中"),s("code",[t._v("n")]),t._v("为十六进制转义值，十六进制转义值必须为确定的两个数字长，例如"),s("code",[t._v("\\x41")]),t._v("匹配"),s("code",[t._v("A")]),t._v("，"),s("code",[t._v("\\x041")]),t._v("则等价于"),s("code",[t._v("\\x04")]),t._v("与"),s("code",[t._v("1")]),t._v("，正则表达式中可以使用"),s("code",[t._v("ASCII")]),t._v("编码。")]),t._v(" "),s("li",[s("code",[t._v("\\num")]),t._v(": 匹配"),s("code",[t._v("num")]),t._v("，其中"),s("code",[t._v("num")]),t._v("是一个正整数，对所获取的匹配的引用，例如"),s("code",[t._v("(.)\\1")]),t._v("匹配两个连续的相同字符。")]),t._v(" "),s("li",[s("code",[t._v("\\n")]),t._v(": 标识一个八进制转义值或一个向后引用，如果"),s("code",[t._v("\\n")]),t._v("之前至少"),s("code",[t._v("n")]),t._v("个获取的子表达式，则"),s("code",[t._v("n")]),t._v("为向后引用，否则如果"),s("code",[t._v("n")]),t._v("为八进制数字"),s("code",[t._v("0-7")]),t._v("，则"),s("code",[t._v("n")]),t._v("为一个八进制转义值。")]),t._v(" "),s("li",[s("code",[t._v("\\nm")]),t._v(": 标识一个八进制转义值或一个向后引用，如果"),s("code",[t._v("\\nm")]),t._v("之前至少有"),s("code",[t._v("nm")]),t._v("个获得子表达式，则"),s("code",[t._v("nm")]),t._v("为向后引用，如果"),s("code",[t._v("\\nm")]),t._v("之前至少有"),s("code",[t._v("n")]),t._v("个获取，则"),s("code",[t._v("n")]),t._v("为一个后跟文字"),s("code",[t._v("m")]),t._v("的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 "),s("code",[t._v("nm")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("\\nml")]),t._v(": 如果"),s("code",[t._v("n")]),t._v("为八进制数字"),s("code",[t._v("0-7")]),t._v("，且"),s("code",[t._v("m")]),t._v("和"),s("code",[t._v("l")]),t._v("均为八进制数字"),s("code",[t._v("0-7")]),t._v("，则匹配八进制转义值"),s("code",[t._v("nml")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("\\un")]),t._v(": 匹配"),s("code",[t._v("n")]),t._v("，其中"),s("code",[t._v("n")]),t._v("是一个用四个十六进制数字表示的"),s("code",[t._v("Unicode")]),t._v("字符，例如"),s("code",[t._v("\\u00A9")]),t._v("匹配版权符号。")])]),t._v(" "),s("h2",{attrs:{id:"示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),s("p",[t._v("该部分出自"),s("code",[t._v("https://c.runoob.com/front-end/854")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"校验数字的表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#校验数字的表达式"}},[t._v("#")]),t._v(" 校验数字的表达式")]),t._v(" "),s("ul",[s("li",[t._v("数字: "),s("code",[t._v("^[0-9]+$")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("n")]),t._v("位的数字: "),s("code",[t._v("^\\d{n}$")]),t._v("。")]),t._v(" "),s("li",[t._v("至少"),s("code",[t._v("n")]),t._v("位的数字: "),s("code",[t._v("^\\d{n,}$")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("m-n")]),t._v("位的数字: "),s("code",[t._v("^\\d{m,n}$")]),t._v("。")]),t._v(" "),s("li",[t._v("零和非零开头的数字: "),s("code",[t._v("^(0|[1-9][0-9]*)$")]),t._v("。")]),t._v(" "),s("li",[t._v("非零开头的最多带两位小数的数字: "),s("code",[t._v("^([1-9][0-9]*)+(\\.[0-9]{1,2})?$")]),t._v("。")]),t._v(" "),s("li",[t._v("带"),s("code",[t._v("1-2")]),t._v("位小数的正数或负数: "),s("code",[t._v("^(\\-)?\\d+(\\.\\d{1,2})$")]),t._v("。")]),t._v(" "),s("li",[t._v("正数、负数、和小数: "),s("code",[t._v("^(\\-|\\+)?\\d+(\\.\\d+)?$")]),t._v("。")]),t._v(" "),s("li",[t._v("有两位小数的正实数: "),s("code",[t._v("^[0-9]+(\\.[0-9]{2})?$")]),t._v("。")]),t._v(" "),s("li",[t._v("有"),s("code",[t._v("1~3")]),t._v("位小数的正实数: "),s("code",[t._v("^[0-9]+(\\.[0-9]{1,3})?$")]),t._v("。")]),t._v(" "),s("li",[t._v("非零的正整数: "),s("code",[t._v("^[1-9]\\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\\+?[1-9][0-9]*$")]),t._v("。")]),t._v(" "),s("li",[t._v("非零的负整数: "),s("code",[t._v('^\\-[1-9][]0-9"*$ 或 ^-[1-9]\\d*$')]),t._v("。")]),t._v(" "),s("li",[t._v("非负整数: "),s("code",[t._v("^\\d+$")]),t._v("或"),s("code",[t._v("^[1-9]\\d*|0$")]),t._v("。")]),t._v(" "),s("li",[t._v("非正整数: "),s("code",[t._v("^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$")]),t._v("。")]),t._v(" "),s("li",[t._v("非负浮点数: "),s("code",[t._v("^\\d+(\\.\\d+)?$")]),t._v("或"),s("code",[t._v("^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$")]),t._v("。")]),t._v(" "),s("li",[t._v("非正浮点数: "),s("code",[t._v("^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$")]),t._v("或"),s("code",[t._v("^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$")]),t._v("。")]),t._v(" "),s("li",[t._v("正浮点数: "),s("code",[t._v("^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$")]),t._v("或"),s("code",[t._v("^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$")]),t._v("。")]),t._v(" "),s("li",[t._v("负浮点数: "),s("code",[t._v("^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$")]),t._v("或"),s("code",[t._v("^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$")]),t._v("。")]),t._v(" "),s("li",[t._v("浮点数: "),s("code",[t._v("^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$")]),t._v("。")])]),t._v(" "),s("h3",{attrs:{id:"校验字符的表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#校验字符的表达式"}},[t._v("#")]),t._v(" 校验字符的表达式")]),t._v(" "),s("ul",[s("li",[t._v("汉字: "),s("code",[t._v("^[\\u4e00-\\u9fa5]{0,}$")]),t._v("。")]),t._v(" "),s("li",[t._v("英文和数字: "),s("code",[t._v("^[A-Za-z0-9]+$")]),t._v("或"),s("code",[t._v("^[A-Za-z0-9]{4,40}$")]),t._v("。")]),t._v(" "),s("li",[t._v("长度为"),s("code",[t._v("3-20")]),t._v("的所有字符: "),s("code",[t._v("^.{3,20}$")]),t._v("。")]),t._v(" "),s("li",[t._v("由"),s("code",[t._v("26")]),t._v("个英文字母组成的字符串: "),s("code",[t._v("^[A-Za-z]+$")]),t._v("。")]),t._v(" "),s("li",[t._v("由"),s("code",[t._v("26")]),t._v("个大写英文字母组成的字符串: "),s("code",[t._v("^[A-Z]+$")]),t._v("。")]),t._v(" "),s("li",[t._v("由"),s("code",[t._v("26")]),t._v("个小写英文字母组成的字符串: "),s("code",[t._v("^[a-z]+$")]),t._v("。")]),t._v(" "),s("li",[t._v("由数字和"),s("code",[t._v("26")]),t._v("个英文字母组成的字符串: "),s("code",[t._v("^[A-Za-z0-9]+$")]),t._v("。")]),t._v(" "),s("li",[t._v("由数字、"),s("code",[t._v("26")]),t._v("个英文字母或者下划线组成的字符串: "),s("code",[t._v("^\\w+$")]),t._v("或"),s("code",[t._v("^\\w{3,20}$")]),t._v("。")]),t._v(" "),s("li",[t._v("中文、英文、数字包括下划线: "),s("code",[t._v("^[\\u4E00-\\u9FA5A-Za-z0-9_]+$")]),t._v("。")]),t._v(" "),s("li",[t._v("中文、英文、数字但不包括下划线等符号: "),s("code",[t._v("^[\\u4E00-\\u9FA5A-Za-z0-9]+$")]),t._v("或"),s("code",[t._v("^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$")]),t._v("。")]),t._v(" "),s("li",[t._v("可以输入含有"),s("code",[t._v("^%&',;=?$\\")]),t._v("等字符: "),s("code",[t._v("[^%&',;=?$\\x22]+")]),t._v("。")]),t._v(" "),s("li",[t._v("禁止输入含有"),s("code",[t._v("~")]),t._v("的字符: "),s("code",[t._v("[^~\\x22]+")]),t._v("。")])]),t._v(" "),s("h3",{attrs:{id:"特殊需求表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特殊需求表达式"}},[t._v("#")]),t._v(" 特殊需求表达式")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Email")]),t._v("地址: "),s("code",[t._v("^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$")]),t._v("。")]),t._v(" "),s("li",[t._v("域名: "),s("code",[t._v("[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+\\.?")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("InternetURL")]),t._v(": "),s("code",[t._v("[a-zA-z]+://[^\\s]*")]),t._v("或"),s("code",[t._v("^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?$")]),t._v("。")]),t._v(" "),s("li",[t._v("手机号码: "),s("code",[t._v("^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$")]),t._v("。")]),t._v(" "),s("li",[t._v("电话号码"),s("code",[t._v("XXX-XXXXXXX")]),t._v("、"),s("code",[t._v("XXXX-XXXXXXXX")]),t._v("、"),s("code",[t._v("XXX-XXXXXXX")]),t._v("、"),s("code",[t._v("XXX-XXXXXXXX")]),t._v("、"),s("code",[t._v("XXXXXXX")]),t._v("和"),s("code",[t._v("XXXXXXXX")]),t._v(": "),s("code",[t._v("^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$")]),t._v("。")]),t._v(" "),s("li",[t._v("国内电话号码"),s("code",[t._v("(0511-4405222、021-87888822)")]),t._v(": "),s("code",[t._v("\\d{3}-\\d{8}|\\d{4}-\\d{7}")]),t._v("。")]),t._v(" "),s("li",[t._v("电话号码正则表达式(支持手机号码，"),s("code",[t._v("3-4")]),t._v("位区号，"),s("code",[t._v("7-8")]),t._v("位直播号码，"),s("code",[t._v("1-4")]),t._v("位分机号):  "),s("code",[t._v("((\\d{11})|^((\\d{7,8})|(\\d{4}|\\d{3})-(\\d{7,8})|(\\d{4}|\\d{3})-(\\d{7,8})-(\\d{4}|\\d{3}|\\d{2}|\\d{1})|(\\d{7,8})-(\\d{4}|\\d{3}|\\d{2}|\\d{1}))$)")]),t._v("。")]),t._v(" "),s("li",[t._v("身份证号("),s("code",[t._v("15")]),t._v("位、"),s("code",[t._v("18")]),t._v("位数字)，最后一位是校验位，可能为数字或字符"),s("code",[t._v("X")]),t._v(": "),s("code",[t._v("(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)")]),t._v("。")]),t._v(" "),s("li",[t._v("帐号是否合法(字母开头，允许"),s("code",[t._v("5-16")]),t._v("字节，允许字母数字下划线): "),s("code",[t._v("^[a-zA-Z][a-zA-Z0-9_]{4,15}$")]),t._v("。")]),t._v(" "),s("li",[t._v("密码(以字母开头，长度在"),s("code",[t._v("6~18")]),t._v("之间，只能包含字母、数字和下划线): "),s("code",[t._v("^[a-zA-Z]\\w{5,17}$")]),t._v("。")]),t._v(" "),s("li",[t._v("强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在"),s("code",[t._v("8-10")]),t._v("之间): "),s("code",[t._v("^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$")]),t._v("。")]),t._v(" "),s("li",[t._v("强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在"),s("code",[t._v("8-10")]),t._v("之间): "),s("code",[t._v("^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$")]),t._v("。")]),t._v(" "),s("li",[t._v("日期格式: "),s("code",[t._v("^\\d{4}-\\d{1,2}-\\d{1,2}")]),t._v("。")]),t._v(" "),s("li",[t._v("一年的"),s("code",[t._v("12")]),t._v("个月("),s("code",[t._v("01-09")]),t._v("和"),s("code",[t._v("1-12")]),t._v("): "),s("code",[t._v("^(0?[1-9]|1[0-2])$")]),t._v("。")]),t._v(" "),s("li",[t._v("一个月的"),s("code",[t._v("31")]),t._v("天("),s("code",[t._v("01-09")]),t._v("和"),s("code",[t._v("1-31")]),t._v("): "),s("code",[t._v("^((0?[1-9])|((1|2)[0-9])|30|31)$")]),t._v("。")]),t._v(" "),s("li",[t._v("钱的输入格式，精确到小数点后两位: "),s("code",[t._v("^[0-9]+(.[0-9]{1,2})?$")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("xml")]),t._v("文件: "),s("code",[t._v("^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$")]),t._v("。")]),t._v(" "),s("li",[t._v("中文字符的正则表达式: "),s("code",[t._v("[\\u4e00-\\u9fa5]")]),t._v("。")]),t._v(" "),s("li",[t._v("双字节字符: "),s("code",[t._v("[^\\x00-\\xff]")]),t._v("(包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计"),s("code",[t._v("2")]),t._v("，"),s("code",[t._v("ASCII")]),t._v("字符计"),s("code",[t._v("1")]),t._v("))。")]),t._v(" "),s("li",[t._v("空白行的正则表达式: "),s("code",[t._v("\\n\\s*\\r")]),t._v("(可以用来删除空白行)。")]),t._v(" "),s("li",[s("code",[t._v("HTML")]),t._v("标记的正则表达式: "),s("code",[t._v("<(\\S*?)[^>]*>.*?|<.*? />")]),t._v("。")]),t._v(" "),s("li",[t._v("首尾空白字符的正则表达式: "),s("code",[t._v("^\\s*|\\s*$或(^\\s*)|(\\s*$)")]),t._v("(可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等))。")]),t._v(" "),s("li",[t._v("腾讯"),s("code",[t._v("QQ")]),t._v("号: "),s("code",[t._v("[1-9][0-9]{4,}")]),t._v("(腾讯"),s("code",[t._v("QQ")]),t._v("号从"),s("code",[t._v("10000")]),t._v("开始)。")]),t._v(" "),s("li",[t._v("中国邮政编码: "),s("code",[t._v("[1-9]\\d{5}(?!\\d)")]),t._v("(中国邮政编码为"),s("code",[t._v("6")]),t._v("位数字)。")]),t._v(" "),s("li",[s("code",[t._v("IP")]),t._v("地址: "),s("code",[t._v("((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))")]),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"每日一题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#每日一题"}},[t._v("#")]),t._v(" 每日一题")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("https://github.com/WindrunnerMax/EveryDay\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("https://c.runoob.com/front-end/854\nhttps://www.jianshu.com/p/7dbf4a1e6805\nhttps://juejin.im/post/6844903816781889543\nhttps://www.runoob.com/regexp/regexp-metachar.html\nhttps://www.cnblogs.com/y896926473/articles/6366222.html\nhttps://www.cnblogs.com/kevin-yuan/archive/2012/09/25/2702167.html\nhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])])])}),[],!1,null,null,null);s.default=n.exports}}]);