(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{594:function(s,e,n){"use strict";n.r(e);var t=n(0),a=Object(t.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"手写usestate与useeffect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#手写usestate与useeffect"}},[s._v("#")]),s._v(" 手写useState与useEffect")]),s._v(" "),e("p",[e("code",[s._v("useState")]),s._v("与"),e("code",[s._v("useEffect")]),s._v("是驱动"),e("code",[s._v("React hooks")]),s._v("运行的基础，"),e("code",[s._v("useState")]),s._v("用于管理状态，"),e("code",[s._v("useEffect")]),s._v("用以处理副作用，通过手写简单的"),e("code",[s._v("useState")]),s._v("与"),e("code",[s._v("useEffect")]),s._v("来理解其运行原理。")]),s._v(" "),e("h2",{attrs:{id:"usestate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usestate"}},[s._v("#")]),s._v(" useState")]),s._v(" "),e("p",[s._v("一个简单的"),e("code",[s._v("useState")]),s._v("的使用如下。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// App.tsx\nimport { useState } from "react";\nimport "./styles.css";\n\nexport default function App() {\n  const [count, setCount] = useState(0);\n\n  console.log("refresh");\n  const addCount = () => setCount(count + 1);\n\n  return (\n    <>\n      <div>{count}</div>\n      <button onClick={addCount}>Count++</button>\n    </>\n  );\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("当页面在首次渲染时会"),e("code",[s._v("render")]),s._v("渲染"),e("code",[s._v("<App />")]),s._v("函数组件，其实际上是调用"),e("code",[s._v("App()")]),s._v("方法，得到虚拟"),e("code",[s._v("DOM")]),s._v("元素，并将其渲染到浏览器页面上，当用户点击"),e("code",[s._v("button")]),s._v("按钮时会调用"),e("code",[s._v("addCount")]),s._v("方法，然后再进行一次"),e("code",[s._v("render")]),s._v("渲染"),e("code",[s._v("<App />")]),s._v("函数组件，其实际上还是调用了"),e("code",[s._v("App()")]),s._v("方法，得到一个新的虚拟"),e("code",[s._v("DOM")]),s._v("元素，然后"),e("code",[s._v("React")]),s._v("会执行"),e("code",[s._v("DOM diff")]),s._v("算法，将改变的部分更新到浏览器的页面上。也就是说，实际上每次"),e("code",[s._v("setCount")]),s._v("都会重新执行这个"),e("code",[s._v("App()")]),s._v("函数，这个可以通过"),e("code",[s._v('console.log("refresh")')]),s._v("那一行看到效果，每次点击按钮控制台都会打印"),e("code",[s._v("refresh")]),s._v("。"),e("br"),s._v("\n那么问题来了，页面首次渲染和进行"),e("code",[s._v("+1")]),s._v("操作，都会调用"),e("code",[s._v("App()")]),s._v("函数去执行"),e("code",[s._v("const [count, setCount] = useState(0);")]),s._v("这行代码，那它是怎么做到在"),e("code",[s._v("+ +")]),s._v("操作后，第二次渲染时执行同样的代码，却不对变量"),e("code",[s._v("n")]),s._v("进行初始化也就是一直为"),e("code",[s._v("0")]),s._v("，而是拿到"),e("code",[s._v("n")]),s._v("的最新值。"),e("br"),s._v("\n考虑到上边这个问题，我们可以简单实现一个"),e("code",[s._v("useMyState")]),s._v("函数，上边在"),e("code",[s._v("Hooks")]),s._v("为什么称为"),e("code",[s._v("Hooks")]),s._v("这个问题上提到了可以勾过来一个函数作用域的问题，那么我们也完全可以实现一个"),e("code",[s._v("Hooks")]),s._v("去勾过来一个作用域，简单来说就是在"),e("code",[s._v("useMyState")]),s._v("里边保存一个变量，也就是一个闭包里边保存了这个变量，然后这个变量保存了上次的值，再次调用的时候直接取出这个之前保存的值即可，"),e("code",[s._v("https://codesandbox.io/s/fancy-dust-kbd1i?file=/src/use-my-state-version-1.ts")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// index.tsx\nimport { render } from "react-dom";\nimport App from "./App";\n\n// 改造一下让其导出 让我们能够强行刷新`<App />`\nexport const forceRefresh = () => {\n  console.log("Force fresh <App />");\n  const rootElement = document.getElementById("root");\n  render(<App />, rootElement);\n};\n\nforceRefresh();\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// use-my-state-version-1.ts\nimport { forceRefresh } from "./index";\n\nlet saveState: any = null;\n\nexport function useMyState<T>(state: T): [T, (newState: T) => void] {\n  saveState = saveState || state;\n  const rtnState: T = saveState;\n  const setState = (newState: T): void => {\n    saveState = newState;\n    forceRefresh();\n  };\n  return [rtnState, setState];\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// App.tsx\nimport { useMyState } from "./use-my-state-version-1";\nimport "./styles.css";\n\nexport default function App() {\n  const [count, setCount] = useMyState(0);\n\n  console.log("refresh");\n  const addCount = () => setCount(count + 1);\n\n  return (\n    <>\n      <div>{count}</div>\n      <button onClick={addCount}>Count++</button>\n    </>\n  );\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("可以在"),e("code",[s._v("code sandbox")]),s._v("中看到现在已经可以实现点击按钮进行"),e("code",[s._v("++")]),s._v("操作了，而不是无论怎么点击都是"),e("code",[s._v("0")]),s._v("，但是上边的情况太过于简单，因为只有一个"),e("code",[s._v("state")]),s._v("，如果使用多个变量，那就需要调用两次"),e("code",[s._v("useState")]),s._v("，我们就需要对其进行一下改进了，不然会造成多个变量存在一个"),e("code",[s._v("saveState")]),s._v("中，这样会产生冲突覆盖的问题，改进思路有两种:"),e("code",[s._v("1")]),s._v("把做成一个对象，比如"),e("code",[s._v("saveState = { n:0, m:0 }")]),s._v("，这种方式不太符合需求，因为在使用"),e("code",[s._v("useState")]),s._v("的时候只会传递一个初始值参数，不会传递名称; "),e("code",[s._v("2")]),s._v("把"),e("code",[s._v("saveState")]),s._v("做成一个数组，比如"),e("code",[s._v("saveState:[0, 0]")]),s._v("。实际上"),e("code",[s._v("React")]),s._v("中是通过类似单链表的形式来代替数组的，通过"),e("code",[s._v("next")]),s._v("按顺序串联所有的"),e("code",[s._v("hook")]),s._v("，使用数组也是一种类似的操作，因为两者都依赖于定义"),e("code",[s._v("Hooks")]),s._v("的顺序，"),e("code",[s._v("https://codesandbox.io/s/fancy-dust-kbd1i?file=/src/use-my-state-version-2.ts")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// index.tsx\nimport { render } from "react-dom";\nimport App from "./App";\n\n// 改造一下让其导出 让我们能够强行刷新`<App />`\nexport const forceRefresh = () => {\n  console.log("Force fresh <App />");\n  const rootElement = document.getElementById("root");\n  render(<App />, rootElement);\n};\n\nforceRefresh();\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// use-my-state-version-2.ts\nimport { forceRefresh } from "./index";\n\nlet saveState: any[] = [];\nlet index: number = 0;\n\nexport function useMyState<T>(state: T): [T, (newState: T) => void] {\n  const curIndex = index;\n  index++;\n  saveState[curIndex] = saveState[curIndex] || state;\n  const rtnState: T = saveState[curIndex];\n  const setState = (newState: T): void => {\n    saveState[curIndex] = newState;\n    index = 0; // 必须在渲染前后将`index`值重置为`0` 不然就无法借助调用顺序确定`Hooks`了\n    forceRefresh();\n  };\n  return [rtnState, setState];\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// App.tsx\nimport { useMyState } from "./use-my-state-version-2";\nimport "./styles.css";\n\nexport default function App() {\n  const [count1, setCount1] = useMyState(0);\n  const [count2, setCount2] = useMyState(0);\n\n  console.log("refresh");\n  const addCount1 = () => setCount1(count1 + 1);\n  const addCount2 = () => setCount2(count2 + 1);\n\n  return (\n    <>\n      <div>{count1}</div>\n      <button onClick={addCount1}>Count1++</button>\n      <div>{count2}</div>\n      <button onClick={addCount2}>Count2++</button>\n    </>\n  );\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("p",[s._v("可以看到已经可以实现在多个"),e("code",[s._v("State")]),s._v("下的独立的状态更新了，那么问题又又来了，"),e("code",[s._v("<App />")]),s._v("用了"),e("code",[s._v("saveState")]),s._v("和"),e("code",[s._v("index")]),s._v("，那其他组件用什么，也就是说多个组件如果解决每个组件独立的作用域，解决办法"),e("code",[s._v("1")]),s._v("每个组件都创建一个"),e("code",[s._v("saveState")]),s._v("和"),e("code",[s._v("index")]),s._v("，但是几个组件在一个文件中又会导致"),e("code",[s._v("saveState")]),s._v("、"),e("code",[s._v("index")]),s._v("冲突。解决办法"),e("code",[s._v("2")]),s._v("放在组件对应的虚拟节点对象上，"),e("code",[s._v("React")]),s._v("采用的也是这种方案，将"),e("code",[s._v("saveState")]),s._v("和"),e("code",[s._v("index")]),s._v("变量放在组件对应的虚拟节点对象"),e("code",[s._v("FiberNode")]),s._v("上，在"),e("code",[s._v("React")]),s._v("中具体实现"),e("code",[s._v("saveState")]),s._v("叫做"),e("code",[s._v("memoizedState")]),s._v("，实际上"),e("code",[s._v("React")]),s._v("中是通过类似单链表的形式来代替数组的，通过"),e("code",[s._v("next")]),s._v("按顺序串联所有的"),e("code",[s._v("hook")]),s._v("。"),e("br"),s._v("\n可以看出"),e("code",[s._v("useState")]),s._v("是强依赖于定义的顺序的，"),e("code",[s._v("useState")]),s._v("数组中保存的顺序非常重要在执行函数组件的时候可以通过下标的自增获取对应的"),e("code",[s._v("state")]),s._v("值，由于是通过顺序获取的，这将会强制要求你不允许更改"),e("code",[s._v("useState")]),s._v("的顺序，例如使用条件判断是否执行"),e("code",[s._v("useState")]),s._v("这样会导致按顺序获取到的值与预期的值不同，这个问题也出现在了"),e("code",[s._v("React.useState")]),s._v("自己身上，因此"),e("code",[s._v("React")]),s._v("是不允许你使用条件判断去控制函数组件中的"),e("code",[s._v("useState")]),s._v("的顺序的，这会导致获取到的值混乱，类似于下边的代码则会抛出异常。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('const App = () => {\n    let state;\n    if(true){\n        [state, setState] = React.useState(0);\n    }\n    return (\n        <div>{state}</div>\n    )\n}\n\n\x3c!-- React Hook "React.useState" is called conditionally. React Hooks must be called in the exact same order in every component render  react-hooks/rules-of-hooks--\x3e\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("这里当然只是对于"),e("code",[s._v("useState")]),s._v("的简单实现，对于"),e("code",[s._v("React")]),s._v("真正的实现可以参考"),e("code",[s._v("packages/react-reconciler/src/ReactFiberHooks.js")]),s._v("，当前的"),e("code",[s._v("React")]),s._v("版本是"),e("code",[s._v("16.10.2")]),s._v("，也可以简略看一下相关的"),e("code",[s._v("type")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language-ts line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Hooks")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  memoizedState"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("any")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指向当前渲染节点`Fiber` 上一次完整更新之后的最终状态值")]),s._v("\n  baseState"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("any")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始化`initialState` 已经每次`dispatch`之后`newState`")]),s._v("\n  baseUpdate"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Update"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("any")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当前需要更新的`Update` 每次更新完之后会赋值上一个`update` 方便`react`在渲染错误的边缘数据回溯")]),s._v("\n  queue"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" UpdateQueue"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("any")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 缓存的更新队列 存储多次更新行为")]),s._v("\n  next"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Hook "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// `link`到下一个`hooks` 通过`next`串联所有`hooks`")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h2",{attrs:{id:"useeffect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#useeffect"}},[s._v("#")]),s._v(" useEffect")]),s._v(" "),e("p",[s._v("一个简单的"),e("code",[s._v("useEffect")]),s._v("的使用如下。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('import { useEffect, useState } from "react";\nimport "./styles.css";\n\nexport default function App() {\n  const [count1, setCount1] = useState(0);\n  const [count2, setCount2] = useState(0);\n\n  console.log("refresh");\n  const addCount1 = () => setCount1(count1 + 1);\n  const addCount2 = () => setCount2(count2 + 1);\n\n  useEffect(() => {\n    console.log("count1 -> effect", count1);\n  }, [count1]);\n\n  return (\n    <>\n      <div>{count1}</div>\n      <button onClick={addCount1}>Count1++</button>\n      <div>{count2}</div>\n      <button onClick={addCount2}>Count2++</button>\n    </>\n  );\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br")])]),e("p",[s._v("同样，每次"),e("code",[s._v("addCount1")]),s._v("都会重新执行这个"),e("code",[s._v("App()")]),s._v("函数，每次点击按钮控制台都会打印"),e("code",[s._v("refresh")]),s._v("，在这里还通过"),e("code",[s._v("count1")]),s._v("变动的副作用来打印了"),e("code",[s._v("count1 -> effect ${count1}")]),s._v("，而点击"),e("code",[s._v("addCount2")]),s._v("却不会处罚副作用的打印，原因明显是我们只指定了"),e("code",[s._v("count1")]),s._v("的副作用，由此可见可以通过"),e("code",[s._v("useEffect")]),s._v("来实现更细粒度的副作用处理。"),e("br"),s._v("\n在这里我们依旧延续上边"),e("code",[s._v("useState")]),s._v("的实现思路，将之前的数据存储起来，之后当函数执行的时候我们对比这其中的数据是否发生了变动，如果发生了变动，那么我们便执行该函数，当然我们还需要完成副作用清除的功能，"),e("code",[s._v("https://codesandbox.io/s/react-usestate-8v0li9?file=/src/use-my-effect.ts")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// use-my-effect.ts\nconst dependencyList: unknown[][] = [];\nconst clearCallbacks: (void | (() => void))[] = [];\nlet index: number = 0;\n\nexport function useMyEffect(\n  callback: () => void | (() => void),\n  deps: unknown[]\n): void {\n  const curIndex = index;\n  index++;\n  const lastDeps = dependencyList[curIndex];\n  const changed =\n    !lastDeps || !deps || deps.some((dep, i) => dep !== lastDeps[i]);\n  if (changed) {\n    dependencyList[curIndex] = deps;\n    const clearCallback = clearCallbacks[curIndex];\n    if (clearCallback) clearCallback();\n    clearCallbacks[curIndex] = callback();\n  }\n}\n\nexport function clearEffectIndex() {\n  index = 0;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// App.tsx\nimport { useState } from "react";\nimport { useMyEffect, clearEffectIndex } from "./use-my-effect";\nimport "./styles.css";\n\nexport default function App() {\n  const [count1, setCount1] = useState(0);\n  const [count2, setCount2] = useState(0);\n\n  console.log("refresh");\n  const addCount1 = () => setCount1(count1 + 1);\n  const addCount2 = () => setCount2(count2 + 1);\n\n  useMyEffect(() => {\n    console.log("count1 -> effect", count1);\n    console.log("setTimeout", count1);\n    return () => console.log("clear setTimeout", count1);\n  }, [count1]);\n\n  useMyEffect(() => {\n    console.log("count2 -> effect", count2);\n  }, [count2]);\n\n  clearEffectIndex();\n\n  return (\n    <>\n      <div>{count1}</div>\n      <button onClick={addCount1}>Count1++</button>\n      <div>{count2}</div>\n      <button onClick={addCount2}>Count2++</button>\n    </>\n  );\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("p",[s._v("通过上边的实现，我们也可以通过将依赖与副作用清除函数存起来的方式，来实现"),e("code",[s._v("useEffect")]),s._v("，通过对比上一次传递的依赖值与当前传递的依赖值是否相同，来决定是否执行传递过来的函数，在这里由于我们无法得知这个"),e("code",[s._v("React.Fc")]),s._v("组件函数是在什么时候完成最后一个"),e("code",[s._v("Effect")]),s._v("，我们就需要手动来赋值这个标记的"),e("code",[s._v("index")]),s._v("为"),e("code",[s._v("0")]),s._v("。当然在"),e("code",[s._v("React")]),s._v("之中同样也是将"),e("code",[s._v("useEffect")]),s._v("挂载到了"),e("code",[s._v("Fiber")]),s._v("上来实现的，并且将所需要的依赖值存储在当前的"),e("code",[s._v("Fiber")]),s._v("的"),e("code",[s._v("memorizedState")]),s._v("中，通过实现的链表以及判断初次加载来实现了通过"),e("code",[s._v("next")]),s._v("按顺序串联所有的"),e("code",[s._v("hooks")]),s._v("，这样也就能知道究竟哪个是最后一个"),e("code",[s._v("Hooks")]),s._v("了，另外"),e("code",[s._v("useEffect")]),s._v("同样也是强依赖于定义的顺序的，能够让"),e("code",[s._v("React")]),s._v("对齐多次执行组件函数时的依赖。")]),s._v(" "),e("h2",{attrs:{id:"自定义hooks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义hooks"}},[s._v("#")]),s._v(" 自定义Hooks")]),s._v(" "),e("p",[s._v("我在初学"),e("code",[s._v("Hooks")]),s._v("的时候一直有一个疑问，对于"),e("code",[s._v("React Hooks")]),s._v("的使用与普通的函数调用区别究竟在哪里，当时我还对知乎的某个问题强答了一番。")]),s._v(" "),e("p",[s._v("以我学了几天"),e("code",[s._v("React")]),s._v("的理解，自定义"),e("code",[s._v("Hooks")]),s._v("跟普通函数区别在于:")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("Hooks")]),s._v("只应该在"),e("code",[s._v("React")]),s._v("函数组件内调用，而不应该在普通函数调用。")]),s._v(" "),e("li",[e("code",[s._v("Hooks")]),s._v("能够调用诸如"),e("code",[s._v("useState")]),s._v("、"),e("code",[s._v("useEffect")]),s._v("、"),e("code",[s._v("useContext")]),s._v("等，普通函数则不能。")])]),s._v(" "),e("p",[s._v("由此觉得"),e("code",[s._v("Hooks")]),s._v("就像"),e("code",[s._v("mixin")]),s._v("，是在组件之间共享有状态和副作用的方式，所以应该是应该在函数组件中用到的与组件生命周期等相关的函数才能称为"),e("code",[s._v("Hooks")]),s._v("，而不仅仅是普通的"),e("code",[s._v("utils")]),s._v("函数。"),e("br"),s._v("\n对于第一个问题，如果将其声明为"),e("code",[s._v("Hooks")]),s._v("但是并没有起到作为Hooks的功能，那么私认为不能称为"),e("code",[s._v("Hooks")]),s._v("，为避免混淆，还是建议在调用其他"),e("code",[s._v("Hooks")]),s._v("的时候再使用"),e("code",[s._v("use")]),s._v("标识。当然，诸如自己实现一个"),e("code",[s._v("useState")]),s._v("功能这种虽然并没有调用其他的"),e("code",[s._v("Hooks")]),s._v("，但是他与函数组件的功能强相关，肯定是属于"),e("code",[s._v("Hooks")]),s._v("的。"),e("br"),s._v("\n对于第二个问题的话，其实必须使用"),e("code",[s._v("use")]),s._v("开头并不是一个语法或者一个强制性的方案， 以"),e("code",[s._v("use")]),s._v("开头其实更像是一个约定，就像是"),e("code",[s._v("GET")]),s._v("请求约定语义不携带"),e("code",[s._v("Body")]),s._v("一样， 其主要目的还是为了约束语法，如果你自己实现一个类似"),e("code",[s._v("useState")]),s._v("简单功能的话，就会了解到为什么不能够出现类似于"),e("code",[s._v("if (xxx) const [a, setA] = useState(0);")]),s._v("这样的代码了，"),e("code",[s._v("React")]),s._v("文档中明确说明了使用"),e("code",[s._v("Hooks")]),s._v("的规则，使用"),e("code",[s._v("use")]),s._v("开头的目的就是让"),e("code",[s._v("React")]),s._v("识别出来这是个"),e("code",[s._v("Hooks")]),s._v("，从而检查这些规则约束，通常也会使用"),e("code",[s._v("ESlint")]),s._v("配合"),e("code",[s._v("eslint-plugin-react-hooks")]),s._v("检查这些规则。")]),s._v(" "),e("p",[s._v("后来对于这个问题有了新的理解，如果定义一个真正的自定义"),e("code",[s._v("Hooks")]),s._v("的话，那么通常都会需要使用"),e("code",[s._v("useState")]),s._v("、"),e("code",[s._v("useEffect")]),s._v("等"),e("code",[s._v("Hooks")]),s._v("，就相当于自定义"),e("code",[s._v("Hooks")]),s._v("是由官方的"),e("code",[s._v("Hooks")]),s._v("组合而成的，而通过官方的这些"),e("code",[s._v("Hooks")]),s._v("来组合的话，就可以实现将数据挂载到节点上，也就是上边的实现提到的实际"),e("code",[s._v("memorizedState")]),s._v("都是在"),e("code",[s._v("Fiber")]),s._v("中的，而自行实现的函数例如上边的"),e("code",[s._v("Hooks")]),s._v("实现，是无法做到这一点的。也就是说我们通过自定义"),e("code",[s._v("Hooks")]),s._v("是通过来组合官方"),e("code",[s._v("Hooks")]),s._v("以及自己的逻辑来实现的对于节点内的一些状态或者其他方面的逻辑封装，而使用普通函数且采用类似于"),e("code",[s._v("Hooks")]),s._v("的语法的话则只能实现在全局的状态和逻辑的封装，简单来说就是提供了接口来让我们可以在节点上做逻辑的封装。"),e("br"),s._v("\n有一个简单的例子，例如我们要封装一个"),e("code",[s._v("useUpdateEffect")]),s._v("来避免在函数组件在第一次挂载的时候就执行"),e("code",[s._v("effect")]),s._v("，在这里我们就应该采用"),e("code",[s._v("useRef")]),s._v("或者是"),e("code",[s._v("useState")]),s._v("而不是仅仅定义一个变量来存储状态值，"),e("code",[s._v("https://codesandbox.io/s/flamboyant-tu-21po2l?file=/src/App.tsx")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// use-update-effect-ref.ts\nimport { DependencyList, EffectCallback, useEffect, useRef } from "react";\n\nexport const useUpdateEffect = (\n  effect: EffectCallback,\n  deps?: DependencyList\n) => {\n  const isMounted = useRef(false);\n\n  useEffect(() => {\n    if (!isMounted.current) {\n      isMounted.current = true;\n    } else {\n      return effect();\n    }\n  }, deps);\n};\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// use-update-effect-var.ts\nimport { DependencyList, EffectCallback, useEffect } from "react";\n\nlet isMounted = false;\nexport const useUpdateEffect = (\n  effect: EffectCallback,\n  deps?: DependencyList\n) => {\n  useEffect(() => {\n    if (!isMounted) {\n      isMounted = true;\n    } else {\n      return effect();\n    }\n  }, deps);\n};\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// App.tsx\nimport { useState, useEffect } from "react";\nimport { useUpdateEffect } from "./use-update-effect-ref";\n// import { useUpdateEffect } from "./use-update-effect-var";\nimport "./styles.css";\n\nexport default function App() {\n  const [count1, setCount1] = useState(0);\n  const [count2, setCount2] = useState(0);\n\n  const addCount1 = () => setCount1(count1 + 1);\n  const addCount2 = () => setCount2(count2 + 1);\n\n  useUpdateEffect(() => {\n    console.log("count1 -> effect", count1);\n  }, [count1]);\n\n  useUpdateEffect(() => {\n    console.log("count2 -> effect", count2);\n  }, [count2]);\n\n  return (\n    <>\n      <div>{count1}</div>\n      <button onClick={addCount1}>Count1++</button>\n      <div>{count2}</div>\n      <button onClick={addCount2}>Count2++</button>\n    </>\n  );\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br")])]),e("p",[s._v("当我们切换"),e("code",[s._v("use-update-effect-ref")]),s._v("与"),e("code",[s._v("use-update-effect-var")]),s._v("的"),e("code",[s._v("useUpdateEffect")]),s._v("时，我们会发现当刷新页面时使用"),e("code",[s._v("use-update-effect-ref")]),s._v("将不会有值打印，而"),e("code",[s._v("use-update-effect-var")]),s._v("则会打印"),e("code",[s._v("count2 -> effect 0")]),s._v("，而在点击"),e("code",[s._v("Count1++")]),s._v("或者"),e("code",[s._v("Count2++")]),s._v("的效果都是正常的，说明"),e("code",[s._v("use-update-effect-ref")]),s._v("是能够我们想要的"),e("code",[s._v("useUpdateEffect")]),s._v("功能，而"),e("code",[s._v("use-update-effect-var")]),s._v("却因为变量值共享的问题而无法正确实现功能，当然我们也可以通过类似于数组的方式来解决这个问题，但是再具体到各个组件之间的共享上面，我们就无法在在类似于"),e("code",[s._v("Hooks")]),s._v("语法的基础上来实现了，必须手动注册一个闭包来完成类似的功能，而且类似于"),e("code",[s._v("useState")]),s._v("在"),e("code",[s._v("set")]),s._v("时刷新本组件以及子组件的方式，就必须借助"),e("code",[s._v("useState")]),s._v("来实现了。")]),s._v(" "),e("h2",{attrs:{id:"每日一题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#每日一题"}},[s._v("#")]),s._v(" 每日一题")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("https://github.com/WindrunnerMax/EveryDay\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("https://zhuanlan.zhihu.com/p/265662126\nhttps://juejin.cn/post/6927698033798807560\nhttps://segmentfault.com/a/1190000037608813\nhttps://github.com/brickspert/blog/issues/26\nhttps://codesandbox.io/s/flamboyant-tu-21po2l\nhttps://codesandbox.io/s/react-usestate-kbd1i\nhttps://codesandbox.io/s/react-usestate-8v0li9\nhttps://stackoverflow.com/questions/60133412/react-custom-hooks-vs-normal-functions-what-is-the-difference\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])])])}),[],!1,null,null,null);e.default=a.exports}}]);