(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{591:function(e,s,t){"use strict";t.r(s);var n=t(0),a=Object(n.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"useeffect与uselayouteffect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#useeffect与uselayouteffect"}},[e._v("#")]),e._v(" useEffect与useLayoutEffect")]),e._v(" "),s("p",[s("code",[e._v("useEffect")]),e._v("与"),s("code",[e._v("useLayoutEffect")]),e._v("可以统称为"),s("code",[e._v("Effect Hook")]),e._v("，"),s("code",[e._v("Effect Hook")]),e._v("可以在函数组件中执行副作用操作，副作用是指函数或者表达式的行为依赖于外部环境，或者在这里可以理解为修改了某状态会对其他的状态造成影响，这个影响就是副作用,数据获取，设置订阅以及手动更改"),s("code",[e._v("React")]),e._v("组件中的"),s("code",[e._v("DOM")]),e._v("都属于副作用。")]),e._v(" "),s("h2",{attrs:{id:"useeffect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#useeffect"}},[e._v("#")]),e._v(" useEffect")]),e._v(" "),s("p",[s("code",[e._v("useEffect Hook")]),e._v("可以看做 "),s("code",[e._v("componentDidMount")]),e._v("、"),s("code",[e._v("componentDidUpdate")]),e._v("和"),s("code",[e._v("componentWillUnmount")]),e._v("这三个生命周期函数的组合，但是使用多个"),s("code",[e._v("Effect")]),e._v("实现关注点分离，也就是说"),s("code",[e._v("useEffect")]),e._v("的粒度更低，可以将各个关注的位置分离处理副作用。"),s("br"),e._v("\n既然是对"),s("code",[e._v("componentDidMount")]),e._v("、"),s("code",[e._v("componentDidUpdate")]),e._v("和"),s("code",[e._v("componentWillUnmount")]),e._v("这三个生命周期函数的组合，那么我们也可以使用"),s("code",[e._v("useEffect")]),e._v("将其分离，首先对于"),s("code",[e._v("componentDidMount")]),e._v("与"),s("code",[e._v("componentWillUnmount")]),e._v("，也就是想执行只运行一次的 "),s("code",[e._v("effect")]),e._v("(仅在组件挂载和卸载时执行)，由于不存在任何依赖，那么对于第二个参数就是一个空的数组。如果省略了第二个参数的话，那么在组件的初始化和更新都会执行，一般情况下是并不希望这样的，因为"),s("code",[e._v("Hooks")]),e._v("的设计，每次"),s("code",[e._v("setState")]),e._v("都会重新执行组件函数，这样的话副作用函数就会频繁执行，所以通常来说还是尽量不要省略第二个参数。回到生命周期，通常如果在组件建立时建立了一个定时器，那么我们希望在组件销毁的时候将定时器销毁来避免内存泄露，那么在"),s("code",[e._v("useEffect")]),e._v("中返回一个函数调用去关闭定时器即可，在这里我们的关注点可以集中在一起而不用再分开两个生命周期去写了。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('import { useEffect, useState } from "react";\nimport "./styles.css";\n\nexport default function App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log("Component is mounted");\n    return () => console.log("Component is unmounted");\n  }, []);\n\n  useEffect(() => {\n    console.log("Component is mounted or updated");\n  })\n\n  return (\n    <div>\n      <div>{count}</div>\n      <button onClick={() => setCount(count + 1)}>count + 1</button>\n    </div>\n  );\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br")])]),s("p",[e._v("对于"),s("code",[e._v("componentDidUpdate")]),e._v("，之前如果是写"),s("code",[e._v("class")]),e._v("组件实现相同的功能的话，就需要在这个生命周期中嵌入很多的逻辑，使用"),s("code",[e._v("useEffect")]),e._v("就可以将各个关注点分离，分别处理其副作用，当然如果依然需要解除诸如订阅或者定时器等，依旧可以返回一个处理函数来处理。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('import { useEffect, useState } from "react";\nimport "./styles.css";\n\nexport default function App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log("Count is updated");\n    document.title = `count: ${count}`;\n  }, [count]);\n\n  return (\n    <div>\n      <div>{count}</div>\n      <button onClick={() => setCount(count + 1)}>count + 1</button>\n    </div>\n  );\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br")])]),s("p",[e._v("在文档中还指出请确保数组中包含了所有外部作用域中会随时间变化并且在"),s("code",[e._v("effect")]),e._v("中使用的变量，否则你的代码会引用到先前渲染中的旧变量。如果你传入了一个空数组"),s("code",[e._v("[]")]),e._v("，"),s("code",[e._v("effect")]),e._v("内部的"),s("code",[e._v("props")]),e._v("和"),s("code",[e._v("state")]),e._v("就会一直拥有其初始值。下面这个例子就会出现一个"),s("code",[e._v("bug")]),e._v("，在依赖数组中没有传递"),s("code",[e._v("count")]),e._v("，那么就会导致当"),s("code",[e._v("effect")]),e._v("执行时，创建的"),s("code",[e._v("effect")]),e._v("闭包会将"),s("code",[e._v("count")]),e._v("的值保存在该闭包当中，且初值为"),s("code",[e._v("0")]),e._v("，每隔一秒回调就会执行"),s("code",[e._v("setCount(0 + 1)")]),e._v("，因此"),s("code",[e._v("count")]),e._v("永远不会超过"),s("code",[e._v("1")]),e._v("，此时如果我们将"),s("code",[e._v("count")]),e._v("加入到依赖数组中便可解决这个问题。对于这个问题，"),s("code",[e._v("React")]),e._v("提供了一个"),s("code",[e._v("exhaustive-deps")]),e._v("的"),s("code",[e._v("ESLint")]),e._v("规则作为"),s("code",[e._v("eslint-plugin-react-hooks")]),e._v("包的一部分，它会帮助你找出无法一致地处理更新的组件。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('import { useEffect, useState } from "react";\nimport "./styles.css";\n\nexport default function App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setCount(count + 1);\n      console.log(count + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []); // `count` 没有被指定为依赖\n\n  return (\n    <div>\n      <div>{count}</div>\n      <button onClick={() => setCount(count + 1)}>count + 1</button>\n    </div>\n  );\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br")])]),s("p",[e._v("看起来和"),s("code",[e._v("Vue")]),e._v("的"),s("code",[e._v("Watch")]),e._v("很像，但是又不尽然相同，语法上的区别主要就在于"),s("code",[e._v("useEffect")]),e._v("可以监控多个属性的变化，"),s("code",[e._v("Watch")]),e._v("不行，当然"),s("code",[e._v("Watch")]),e._v("可以通过间接的方式实现，但是思想方面是不同的，"),s("code",[e._v("Vue")]),e._v("是监听值的变化而"),s("code",[e._v("React")]),e._v("是用以处理副作用。提到这个的主要原因是因为之前写"),s("code",[e._v("Vue")]),e._v("较多，就老想着通过"),s("code",[e._v("Vue")]),e._v("的角度来类比"),s("code",[e._v("React")]),e._v("的各项实现，感觉这样有好处也有弊端，好处就是很快能够上手，坏处就是很容易钻牛角尖，或者很容易陷入一个围城。有位大佬说的挺好的，你需要把"),s("code",[e._v("Vue")]),e._v("忘掉再来学习"),s("code",[e._v("Hooks")]),e._v("，虽然并不绝对但也很有道理。"),s("br"),e._v("\n当函数组件刷新渲染时，包含"),s("code",[e._v("useEffect")]),e._v("的组件整个运行过程如下：")]),e._v(" "),s("ul",[s("li",[e._v("触发组件重新渲染，通过改变组件"),s("code",[e._v("state")]),e._v("或者组件的父组件重新渲染，导致子节点渲染。")]),e._v(" "),s("li",[e._v("组件函数执行。")]),e._v(" "),s("li",[e._v("组件渲染后呈现到屏幕上。")]),e._v(" "),s("li",[s("code",[e._v("useEffect hook")]),e._v("执行。")])]),e._v(" "),s("h2",{attrs:{id:"uselayouteffect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uselayouteffect"}},[e._v("#")]),e._v(" useLayoutEffect")]),e._v(" "),s("p",[s("code",[e._v("useLayoutEffect")]),e._v("和"),s("code",[e._v("useEffect")]),e._v("很像，函数签名也是一样，唯一的不同点就是"),s("code",[e._v("useEffect")]),e._v("是异步执行，而"),s("code",[e._v("useLayoutEffect")]),e._v("是同步执行的。当函数组件刷新渲染时，包含"),s("code",[e._v("useLayoutEffect")]),e._v("的组件整个运行过程如下：")]),e._v(" "),s("ul",[s("li",[e._v("触发组件重新渲染，通过改变组件"),s("code",[e._v("state")]),e._v("或者组件的父组件重新渲染，导致子组件渲染。")]),e._v(" "),s("li",[e._v("组件函数执行。")]),e._v(" "),s("li",[s("code",[e._v("useLayoutEffect hook")]),e._v("执行，"),s("code",[e._v("React")]),e._v("等待"),s("code",[e._v("useLayoutEffect")]),e._v("的函数执行完毕。")]),e._v(" "),s("li",[e._v("组件渲染后呈现到屏幕上。")])]),e._v(" "),s("h2",{attrs:{id:"每日一题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#每日一题"}},[e._v("#")]),e._v(" 每日一题")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("https://github.com/WindrunnerMax/EveryDay\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("https://zhuanlan.zhihu.com/p/348701319\nhttps://zhuanlan.zhihu.com/p/259766064\nhttps://segmentfault.com/a/1190000039087645\nhttp://www.ptbird.cn/react-hoot-useEffect.html\nhttps://react.docschina.org/docs/hooks-effect.html\nhttps://pengfeixc.com/blog/605af93600f1525af762a725\nhttps://react.docschina.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])])])}),[],!1,null,null,null);s.default=a.exports}}]);