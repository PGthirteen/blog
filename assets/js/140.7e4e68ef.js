(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{585:function(n,s,e){"use strict";e.r(s);var a=e(0),t=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"react中的高阶组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react中的高阶组件"}},[n._v("#")]),n._v(" React中的高阶组件")]),n._v(" "),s("p",[n._v("高阶组件"),s("code",[n._v("HOC")]),n._v("即"),s("code",[n._v("Higher Order Component")]),n._v("是"),s("code",[n._v("React")]),n._v("中用于复用组件逻辑的一种高级技巧，"),s("code",[n._v("HOC")]),n._v("自身不是"),s("code",[n._v("React API")]),n._v("的一部分，它是一种基于"),s("code",[n._v("React")]),n._v("的组合特性而形成的设计模式。")]),n._v(" "),s("h2",{attrs:{id:"描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[n._v("#")]),n._v(" 描述")]),n._v(" "),s("p",[n._v("高阶组件从名字上就透漏出高级的气息，实际上这个概念应该是源自于"),s("code",[n._v("JavaScript")]),n._v("的高阶函数，高阶函数就是接受函数作为输入或者输出的函数，可以想到柯里化就是一种高阶函数，同样在"),s("code",[n._v("React")]),n._v("文档上也给出了高阶组件的定义，高阶组件是接收组件并返回新组件的函数。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("A higher-order component is a function that takes a component and returns a new component.\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("具体而言，高阶组件是参数为组件，返回值为新组件的函数，组件是将"),s("code",[n._v("props")]),n._v("转换为"),s("code",[n._v("UI")]),n._v("，而高阶组件是将组件转换为另一个组件。"),s("code",[n._v("HOC")]),n._v("在"),s("code",[n._v("React")]),n._v("的第三方库中很常见，例如"),s("code",[n._v("Redux")]),n._v("的"),s("code",[n._v("connect")]),n._v("和"),s("code",[n._v("Relay")]),n._v("的"),s("code",[n._v("createFragmentContainer")]),n._v("。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 高阶组件定义\nconst higherOrderComponent = (WrappedComponent) => {\n    return class EnhancedComponent extends React.Component {\n        // ...\n        render() {\n          return <WrappedComponent {...this.props} />;\n        }\n  };\n}\n\n// 普通组件定义\nclass WrappedComponent extends React.Component{\n    render(){\n        //....\n    }\n}\n\n// 返回被高阶组件包装过的增强组件\nconst EnhancedComponent = higherOrderComponent(WrappedComponent);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br")])]),s("p",[n._v("在这里要注意，不要试图以任何方式在"),s("code",[n._v("HOC")]),n._v("中修改组件原型，而应该使用组合的方式，通过将组件包装在容器组件中实现功能。通常情况下，实现高阶组件的方式有以下两种:")]),n._v(" "),s("ul",[s("li",[n._v("属性代理"),s("code",[n._v("Props Proxy")]),n._v("。")]),n._v(" "),s("li",[n._v("反向继承"),s("code",[n._v("Inheritance Inversion")]),n._v("。")])]),n._v(" "),s("h3",{attrs:{id:"属性代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性代理"}},[n._v("#")]),n._v(" 属性代理")]),n._v(" "),s("p",[n._v("例如我们可以为传入的组件增加一个存储中的"),s("code",[n._v("id")]),n._v("属性值，通过高阶组件我们就可以为这个组件新增一个"),s("code",[n._v("props")]),n._v("，当然我们也可以对在"),s("code",[n._v("JSX")]),n._v("中的"),s("code",[n._v("WrappedComponent")]),n._v("组件中"),s("code",[n._v("props")]),n._v("进行操作，注意不是操作传入的"),s("code",[n._v("WrappedComponent")]),n._v("类，我们不应该直接修改传入的组件，而可以在组合的过程中对其操作。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const HOC = (WrappedComponent, store) => {\n    return class EnhancedComponent extends React.Component {\n        render() {\n            const newProps = {\n                id: store.id\n            }\n            return <WrappedComponent\n                {...this.props}\n                {...newProps}\n            />;\n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("p",[n._v("我们也可以利用高阶组件将新组件的状态装入到被包装组件中，例如我们可以使用高阶组件将非受控组件转化为受控组件。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('class WrappedComponent extends React.Component {\n    render() {\n        return <input name="name" />;\n    }\n}\n\nconst HOC = (WrappedComponent) => {\n    return class EnhancedComponent extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = { name: "" };\n        }\n        render() {\n            const newProps = {\n                value: this.state.name,\n                onChange: e => this.setState({name: e.target.value}),\n            }\n            return <WrappedComponent \n                {...this.props} \n                {...newProps} \n            />;\n        }\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br")])]),s("p",[n._v("或者我们的目的是将其使用其他组件包裹起来用以达成布局或者是样式的目的。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('const HOC = (WrappedComponent) => {\n    return class EnhancedComponent extends React.Component {\n        render() {\n            return (\n                <div class="layout">\n                    <WrappedComponent  {...this.props} />\n                </div>\n            );\n        }\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("h3",{attrs:{id:"反向继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反向继承"}},[n._v("#")]),n._v(" 反向继承")]),n._v(" "),s("p",[n._v("反向继承是指返回的组件去继承之前的组件，在反向继承中我们可以做非常多的操作，修改"),s("code",[n._v("state")]),n._v("、"),s("code",[n._v("props")]),n._v("甚至是翻转"),s("code",[n._v("Element Tree")]),n._v("，反向继承有一个重要的点，反向继承不能保证完整的子组件树被解析，也就是说解析的元素树中包含了组件(函数类型或者"),s("code",[n._v("Class")]),n._v("类型)，就不能再操作组件的子组件了。"),s("br"),n._v("\n当我们使用反向继承实现高阶组件的时候可以通过渲染劫持来控制渲染，具体是指我们可以有意识地控制"),s("code",[n._v("WrappedComponent")]),n._v("的渲染过程，从而控制渲染控制的结果，例如我们可以根据部分参数去决定是否渲染组件。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const HOC = (WrappedComponent) => {\n    return class EnhancedComponent extends WrappedComponent {\n        render() {\n            return this.props.isRender && super.render();  \n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("甚至我们可以通过重写的方式劫持原组件的生命周期。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const HOC = (WrappedComponent) => {\n    return class EnhancedComponent extends WrappedComponent {\n        componentDidMount(){\n          // ...\n        }\n        render() {\n            return super.render();  \n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("由于实际上是继承关系，我们可以去读取组件的"),s("code",[n._v("props")]),n._v("和"),s("code",[n._v("state")]),n._v("，如果有必要的话，甚至可以修改增加、修改和删除"),s("code",[n._v("props")]),n._v("和"),s("code",[n._v("state")]),n._v("，当然前提是修改带来的风险需要你自己来控制。在一些情况下，我们可能需要为高阶属性传入一些参数，那我们就可以通过柯里化的形式传入参数，配合高阶组件可以完成对组件的类似于闭包的操作。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const HOCFactoryFactory = (params) => {\n    // 此处操作params\n    return (WrappedComponent) => {\n        return class EnhancedComponent extends WrappedComponent {\n            render() {\n                return params.isRender && this.props.isRender && super.render();\n            }\n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("h2",{attrs:{id:"hoc与mixin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hoc与mixin"}},[n._v("#")]),n._v(" HOC与Mixin")]),n._v(" "),s("p",[n._v("使用"),s("code",[n._v("Mixin")]),n._v("与"),s("code",[n._v("HOC")]),n._v("都可以用于解决横切关注点相关的问题。"),s("br"),n._v(" "),s("code",[n._v("Mixin")]),n._v("是一种混入的模式，在实际使用中"),s("code",[n._v("Mixin")]),n._v("的作用还是非常强大的，能够使得我们在多个组件中共用相同的方法，但同样也会给组件不断增加新的方法和属性，组件本身不仅可以感知，甚至需要做相关的处理(例如命名冲突、状态维护等)，一旦混入的模块变多时，整个组件就变的难以维护，"),s("code",[n._v("Mixin")]),n._v("可能会引入不可见的属性，例如在渲染组件中使用"),s("code",[n._v("Mixin")]),n._v("方法，给组件带来了不可见的属性"),s("code",[n._v("props")]),n._v("和状态"),s("code",[n._v("state")]),n._v("，并且"),s("code",[n._v("Mixin")]),n._v("可能会相互依赖，相互耦合，不利于代码维护，此外不同的"),s("code",[n._v("Mixin")]),n._v("中的方法可能会相互冲突。之前"),s("code",[n._v("React")]),n._v("官方建议使用"),s("code",[n._v("Mixin")]),n._v("用于解决横切关注点相关的问题，但由于使用"),s("code",[n._v("Mixin")]),n._v("可能会产生更多麻烦，所以官方现在推荐使用"),s("code",[n._v("HOC")]),n._v("。"),s("br"),n._v("\n高阶组件"),s("code",[n._v("HOC")]),n._v("属于函数式编程"),s("code",[n._v("functional programming")]),n._v("思想，对于被包裹的组件时不会感知到高阶组件的存在，而高阶组件返回的组件会在原来的组件之上具有功能增强的效果，基于此"),s("code",[n._v("React")]),n._v("官方推荐使用高阶组件。")]),n._v(" "),s("h2",{attrs:{id:"注意"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[n._v("#")]),n._v(" 注意")]),n._v(" "),s("h3",{attrs:{id:"不要改变原始组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不要改变原始组件"}},[n._v("#")]),n._v(" 不要改变原始组件")]),n._v(" "),s("p",[n._v("不要试图在"),s("code",[n._v("HOC")]),n._v("中修改组件原型，或以其他方式改变它。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('function logProps(InputComponent) {\n  InputComponent.prototype.componentDidUpdate = function(prevProps) {\n    console.log("Current props: ", this.props);\n    console.log("Previous props: ", prevProps);\n  };\n  // 返回原始的 input 组件，其已经被修改。\n  return InputComponent;\n}\n\n// 每次调用 logProps 时，增强组件都会有 log 输出。\nconst EnhancedComponent = logProps(InputComponent);\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[n._v("这样做会产生一些不良后果，其一是输入组件再也无法像"),s("code",[n._v("HOC")]),n._v("增强之前那样使用了，更严重的是，如果你再用另一个同样会修改"),s("code",[n._v("componentDidUpdate")]),n._v("的"),s("code",[n._v("HOC")]),n._v("增强它，那么前面的"),s("code",[n._v("HOC")]),n._v("就会失效，同时这个"),s("code",[n._v("HOC")]),n._v("也无法应用于没有生命周期的函数组件。"),s("br"),n._v("\n修改传入组件的"),s("code",[n._v("HOC")]),n._v("是一种糟糕的抽象方式，调用者必须知道他们是如何实现的，以避免与其他"),s("code",[n._v("HOC")]),n._v("发生冲突。"),s("code",[n._v("HOC")]),n._v("不应该修改传入组件，而应该使用组合的方式，通过将组件包装在容器组件中实现功能。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('function logProps(WrappedComponent) {\n  return class extends React.Component {\n    componentDidUpdate(prevProps) {\n      console.log("Current props: ", this.props);\n      console.log("Previous props: ", prevProps);\n    }\n    render() {\n      // 将 input 组件包装在容器中，而不对其进行修改，Nice!\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("h3",{attrs:{id:"过滤props"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#过滤props"}},[n._v("#")]),n._v(" 过滤props")]),n._v(" "),s("p",[s("code",[n._v("HOC")]),n._v("为组件添加特性，自身不应该大幅改变约定，"),s("code",[n._v("HOC")]),n._v("返回的组件与原组件应保持类似的接口。"),s("code",[n._v("HOC")]),n._v("应该透传与自身无关的"),s("code",[n._v("props")]),n._v("，大多数"),s("code",[n._v("HOC")]),n._v("都应该包含一个类似于下面的"),s("code",[n._v("render")]),n._v("方法。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("render() {\n  // 过滤掉额外的 props，且不要进行透传\n  const { extraProp, ...passThroughProps } = this.props;\n\n  // 将 props 注入到被包装的组件中。\n  // 通常为 state 的值或者实例方法。\n  const injectedProp = someStateOrInstanceMethod;\n\n  // 将 props 传递给被包装组件\n  return (\n    <WrappedComponent\n      injectedProp={injectedProp}\n      {...passThroughProps}\n    />\n  );\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("h3",{attrs:{id:"最大化可组合性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最大化可组合性"}},[n._v("#")]),n._v(" 最大化可组合性")]),n._v(" "),s("p",[n._v("并不是所有的"),s("code",[n._v("HOC")]),n._v("都一样，有时候它仅接受一个参数，也就是被包裹的组件。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const NavbarWithRouter = withRouter(Navbar);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[s("code",[n._v("HOC")]),n._v("通常可以接收多个参数，比如在"),s("code",[n._v("Relay")]),n._v("中"),s("code",[n._v("HOC")]),n._v("额外接收了一个配置对象用于指定组件的数据依赖。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const CommentWithRelay = Relay.createContainer(Comment, config);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("最常见的"),s("code",[n._v("HOC")]),n._v("签名如下，"),s("code",[n._v("connect")]),n._v("是一个返回高阶组件的高阶函数。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// React Redux 的 `connect` 函数\nconst ConnectedComment = connect(commentSelector, commentActions)(CommentList);\n\n// connect 是一个函数，它的返回值为另外一个函数。\nconst enhance = connect(commentListSelector, commentListActions);\n// 返回值为 HOC，它会返回已经连接 Redux store 的组件\nconst ConnectedComment = enhance(CommentList);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("这种形式可能看起来令人困惑或不必要，但它有一个有用的属性，像"),s("code",[n._v("connect")]),n._v("函数返回的单参数"),s("code",[n._v("HOC")]),n._v("具有签名"),s("code",[n._v("Component => Component")]),n._v("，输出类型与输入类型相同的函数很容易组合在一起。同样的属性也允许"),s("code",[n._v("connect")]),n._v("和其他"),s("code",[n._v("HOC")]),n._v("承担装饰器的角色。此外许多第三方库都提供了"),s("code",[n._v("compose")]),n._v("工具函数，包括"),s("code",[n._v("lodash")]),n._v("、"),s("code",[n._v("Redux")]),n._v("和"),s("code",[n._v("Ramda")]),n._v("。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const EnhancedComponent = withRouter(connect(commentSelector)(WrappedComponent))\n\n// 你可以编写组合工具函数\n// compose(f, g, h) 等同于 (...args) => f(g(h(...args)))\nconst enhance = compose(\n  // 这些都是单参数的 HOC\n  withRouter,\n  connect(commentSelector)\n)\nconst EnhancedComponent = enhance(WrappedComponent)\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("h3",{attrs:{id:"不要在render方法中使用hoc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不要在render方法中使用hoc"}},[n._v("#")]),n._v(" 不要在render方法中使用HOC")]),n._v(" "),s("p",[s("code",[n._v("React")]),n._v("的"),s("code",[n._v("diff")]),n._v("算法使用组件标识来确定它是应该更新现有子树还是将其丢弃并挂载新子树，如果从"),s("code",[n._v("render")]),n._v("返回的组件与前一个渲染中的组件相同"),s("code",[n._v("===")]),n._v("，则"),s("code",[n._v("React")]),n._v("通过将子树与新子树进行区分来递归更新子树，如果它们不相等，则完全卸载前一个子树。"),s("br"),n._v("\n通常在使用的时候不需要考虑这点，但对"),s("code",[n._v("HOC")]),n._v("来说这一点很重要，因为这代表着你不应在组件的"),s("code",[n._v("render")]),n._v("方法中对一个组件应用"),s("code",[n._v("HOC")]),n._v("。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("render() {\n  // 每次调用 render 函数都会创建一个新的 EnhancedComponent\n  // EnhancedComponent1 !== EnhancedComponent2\n  const EnhancedComponent = enhance(MyComponent);\n  // 这将导致子树每次渲染都会进行卸载，和重新挂载的操作！\n  return <EnhancedComponent />;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("这不仅仅是性能问题，重新挂载组件会导致该组件及其所有子组件的状态丢失，如果在组件之外创建"),s("code",[n._v("HOC")]),n._v("，这样一来组件只会创建一次。因此每次"),s("code",[n._v("render")]),n._v("时都会是同一个组件，一般来说，这跟你的预期表现是一致的。在极少数情况下，你需要动态调用"),s("code",[n._v("HOC")]),n._v("，你可以在组件的生命周期方法或其构造函数中进行调用。")]),n._v(" "),s("h3",{attrs:{id:"务必复制静态方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#务必复制静态方法"}},[n._v("#")]),n._v(" 务必复制静态方法")]),n._v(" "),s("p",[n._v("有时在"),s("code",[n._v("React")]),n._v("组件上定义静态方法很有用，例如"),s("code",[n._v("Relay")]),n._v("容器暴露了一个静态方法"),s("code",[n._v("getFragment")]),n._v("以方便组合"),s("code",[n._v("GraphQL")]),n._v("片段。但是当你将"),s("code",[n._v("HOC")]),n._v("应用于组件时，原始组件将使用容器组件进行包装，这意味着新组件没有原始组件的任何静态方法。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('// 定义静态函数\nWrappedComponent.staticMethod = function() {/*...*/}\n// 现在使用 HOC\nconst EnhancedComponent = enhance(WrappedComponent);\n\n// 增强组件没有 staticMethod\ntypeof EnhancedComponent.staticMethod === "undefined" // true\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("为了解决这个问题，你可以在返回之前把这些方法拷贝到容器组件上。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function enhance(WrappedComponent) {\n  class Enhance extends React.Component {/*...*/}\n  // 必须准确知道应该拷贝哪些方法 :(\n  Enhance.staticMethod = WrappedComponent.staticMethod;\n  return Enhance;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("p",[n._v("但要这样做，你需要知道哪些方法应该被拷贝，你可以使用"),s("code",[n._v("hoist-non-react-statics")]),n._v("依赖自动拷贝所有非"),s("code",[n._v("React")]),n._v("静态方法。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('import hoistNonReactStatic from "hoist-non-react-statics";\nfunction enhance(WrappedComponent) {\n  class Enhance extends React.Component {/*...*/}\n  hoistNonReactStatic(Enhance, WrappedComponent);\n  return Enhance;\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("p",[n._v("除了导出组件，另一个可行的方案是再额外导出这个静态方法。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('// 使用这种方式代替...\nMyComponent.someFunction = someFunction;\nexport default MyComponent;\n\n// ...单独导出该方法...\nexport { someFunction };\n\n// ...并在要使用的组件中，import 它们\nimport MyComponent, { someFunction } from "./MyComponent.js";\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])]),s("h3",{attrs:{id:"refs不会被传递"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#refs不会被传递"}},[n._v("#")]),n._v(" Refs不会被传递")]),n._v(" "),s("p",[n._v("虽然高阶组件的约定是将所有"),s("code",[n._v("props")]),n._v("传递给被包装组件，但这对于"),s("code",[n._v("refs")]),n._v("并不适用，那是因为"),s("code",[n._v("ref")]),n._v("实际上并不是一个"),s("code",[n._v("prop")]),n._v("，就像"),s("code",[n._v("key")]),n._v("一样，它是由"),s("code",[n._v("React")]),n._v("专门处理的。如果将"),s("code",[n._v("ref")]),n._v("添加到"),s("code",[n._v("HOC")]),n._v("的返回组件中，则"),s("code",[n._v("ref")]),n._v("引用指向容器组件，而不是被包装组件，这个问题可以通过"),s("code",[n._v("React.forwardRef")]),n._v("这个"),s("code",[n._v("API")]),n._v("明确地将"),s("code",[n._v("refs")]),n._v("转发到内部的组件。。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function logProps(Component) {\n  class LogProps extends React.Component {\n    componentDidUpdate(prevProps) {\n      console.log('old props:', prevProps);\n      console.log('new props:', this.props);\n    }\n\n    render() {\n      const {forwardedRef, ...rest} = this.props;\n\n      // 将自定义的 prop 属性 “forwardedRef” 定义为 ref\n      return <Component ref={forwardedRef} {...rest} />;\n    }\n  }\n\n  // 注意 React.forwardRef 回调的第二个参数 “ref”。\n  // 我们可以将其作为常规 prop 属性传递给 LogProps，例如 “forwardedRef”\n  // 然后它就可以被挂载到被 LogProps 包裹的子组件上。\n  return React.forwardRef((props, ref) => {\n    return <LogProps {...props} forwardedRef={ref} />;\n  });\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br")])]),s("h2",{attrs:{id:"示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[n._v("#")]),n._v(" 示例")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset="UTF-8" />\n    <title>React</title>\n</head>\n\n<body>\n    <div id="root"></div>\n</body>\n<script src="https://unpkg.com/react@17/umd/react.development.js"><\/script>\n<script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"><\/script>\n<script src="https://unpkg.com/@babel/standalone/babel.min.js"><\/script>\n<script type="text/babel">\n    class WrappedComponent extends React.Component {\n        render() {\n            return <input name="name" />;\n        }\n    }\n\n    const HOC = (WrappedComponent) => {\n        return class EnhancedComponent extends React.Component {\n            constructor(props) {\n                super(props);\n                this.state = { name: "" };\n            }\n            render() {\n                const newProps = {\n                    value: this.state.name,\n                    onChange: e => this.setState({name: e.target.value}),\n                }\n                return <WrappedComponent \n                    {...this.props} \n                    {...newProps} \n                />;\n            }\n        }\n    }\n\n    const EnhancedComponent = HOC(WrappedComponent);\n\n    const HOC2 = (WrappedComponent) => {\n        return class EnhancedComponent extends WrappedComponent {\n            render() {\n                return this.props.isRender && super.render();  \n            }\n        }\n    }\n\n    const EnhancedComponent2 = HOC2(WrappedComponent);\n\n    var vm = ReactDOM.render(\n        <>\n            <EnhancedComponent />\n            <EnhancedComponent2 isRender={true} />\n        </>,\n        document.getElementById("root")\n    );\n<\/script>\n\n</html>\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br")])]),s("h2",{attrs:{id:"每日一题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#每日一题"}},[n._v("#")]),n._v(" 每日一题")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("https://github.com/WindrunnerMax/EveryDay\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[n._v("#")]),n._v(" 参考")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("https://juejin.cn/post/6844903477798256647\nhttps://juejin.cn/post/6844904050236850184\nhttps://zh-hans.reactjs.org/docs/higher-order-components.htm\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);