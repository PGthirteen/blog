(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{576:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"hooks与普通函数的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hooks与普通函数的区别"}},[s._v("#")]),s._v(" Hooks与普通函数的区别")]),s._v(" "),t("p",[s._v("在这里的"),t("code",[s._v("Hooks")]),s._v("具体指的是自定义"),t("code",[s._v("Hooks")]),s._v("，自定义的"),t("code",[s._v("Hooks")]),s._v("与我们定义的普通函数类似，都可以封装逻辑，以实现逻辑的复用。"),t("code",[s._v("Hooks")]),s._v("实际上是一种特殊的函数，而由于"),t("code",[s._v("Hooks")]),s._v("的特殊实现，他们之间也存在着一定的区别。")]),s._v(" "),t("h2",{attrs:{id:"描述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[s._v("#")]),s._v(" 描述")]),s._v(" "),t("p",[s._v("在我开始学习"),t("code",[s._v("React Hooks")]),s._v("的时候，我就比较疑惑这个问题。首先看一下官方文档，在自定义"),t("code",[s._v("Hooks")]),s._v("的部分说明了，构建自己的"),t("code",[s._v("Hooks")]),s._v("可以让您将组件逻辑提取到可重用的函数中。如果仅仅是这样的话，那么我们也完全可以使用普通的函数来实现逻辑的复用，而没必要去使用"),t("code",[s._v("Hooks")]),s._v("了。"),t("br"),s._v("\n当然在这里还是得先明确一点定义: 自定义"),t("code",[s._v("Hooks")]),s._v("就是很明确的定义了，其以"),t("code",[s._v("use")]),s._v("开头，内部可以调用其他的"),t("code",[s._v("Hooks")]),s._v("；在这里描述的的普通函数指的是我们平时写的抽离公共逻辑的函数，而不是在我们定义的普通函数中去调用其他"),t("code",[s._v("Hooks")]),s._v("这种方式。如果在普通函数中调用了其他"),t("code",[s._v("Hooks")]),s._v("，那么这个函数就不再是普通函数了，除了违反了"),t("code",[s._v("Hooks")]),s._v("的命名规则以外，那就完全是一个"),t("code",[s._v("Hooks")]),s._v("的定义了。"),t("br"),s._v("\n实际上，"),t("code",[s._v("Coding")]),s._v("比较重要的两个概念是逻辑与数据，文档中提到的将组件逻辑提取到可重用的函数中，重要的是逻辑这两个字，而在两个组件中使用相同的自定义"),t("code",[s._v("Hooks")]),s._v("是不会共享"),t("code",[s._v("State")]),s._v("的。如果我们直接编写一个普通的函数，那么对于其数据是在所有调用者中共享的，因为其只是一个模块，当然前提是我们不会去"),t("code",[s._v("new")]),s._v("出一个新对象来保存状态，在这里只讨论最"),t("code",[s._v("plain")]),s._v("的调用方式，因为"),t("code",[s._v("Hooks")]),s._v("也是直接以非常"),t("code",[s._v("plain")]),s._v("的方式进行调用的。"),t("br"),s._v("\n那么也就是说，如果我们使用"),t("code",[s._v("Hooks")]),s._v("的话，实际上由于可以调用"),t("code",[s._v("useState")]),s._v("、"),t("code",[s._v("useRef")]),s._v("等"),t("code",[s._v("Hooks")]),s._v("，从而获取了对于这个"),t("code",[s._v("Fiber")]),s._v("的访问方法，那么也就相当于我们可以将状态或者说数据存放于当前节点当中，而不是类似于普通函数在全局中共享。当然如果需要全局共享状态的话，状态管理方案是更好的选择，而不是全局变量。")]),s._v(" "),t("h2",{attrs:{id:"示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[s._v("#")]),s._v(" 示例")]),s._v(" "),t("p",[s._v("举一个例子，对于数据请求，我们通常会封装一个"),t("code",[s._v("request")]),s._v("函数，假如我们需要对这个函数做一层缓存，那么就会有逻辑与数据的复用，在逻辑方面我们抽离出的方法差距不大，而对于数据缓存复用方面在这里通过普通函数与自定义"),t("code",[s._v("Hooks")]),s._v("的实现便是不同的。")]),s._v(" "),t("h3",{attrs:{id:"普通函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#普通函数"}},[s._v("#")]),s._v(" 普通函数")]),s._v(" "),t("p",[s._v("在普通函数当中，其就是一个模块，因此其数据是在所有调用者中共享的，因此我们可以通过一个"),t("code",[s._v("Map")]),s._v("来存储数据，这样就可以实现数据的复用。在这里需要注意的是，如果我们的"),t("code",[s._v("url")]),s._v("需要实现在不同组件调用返回的数据不同的话，例如可能会有根据当前页面的"),t("code",[s._v("referer")]),s._v("请求头来决定返回数据的需求，那么这种全局共享的数据就不适用了，就需要多添加一个参数来区分不同的数据，这样就会导致逻辑与数据的耦合，因此这种方式不是很好。当然这也是基于特定需求的，在这里只是举一个例子，毕竟实际上适合的才是最好的。")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" cache "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("fetch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("url")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("has")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" cache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" promise "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fetch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  cache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" promise"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" promise"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h3",{attrs:{id:"自定义hooks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义hooks"}},[s._v("#")]),s._v(" 自定义Hooks")]),s._v(" "),t("p",[s._v("在自定义"),t("code",[s._v("Hooks")]),s._v("当中，数据被锁定在了"),t("code",[s._v("Fiber")]),s._v("当中，也就是说数据的共享范围是在当前组件节点中，相对于全局状态共享来说粒度会更细一些。当然我们如果想直接在全局共享数据的话，这种方案就不合适了，可能还需要配合一个全局的状态管理才行。还是那句话，在这里只是举一个例子，毕竟实际上适合的才是最好的。")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("useRequest")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("url")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" map "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("useRef")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("has")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" promise "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fetch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" promise"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" promise"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("简单总结一下两者的区别:")]),s._v(" "),t("ul",[t("li",[s._v("官方提供的"),t("code",[s._v("Hooks")]),s._v("只应该在"),t("code",[s._v("React")]),s._v("函数组件/自定义"),t("code",[s._v("Hooks")]),s._v("内调用，而不应该在普通函数调用。")]),s._v(" "),t("li",[s._v("自定义"),t("code",[s._v("Hooks")]),s._v("能够调用诸如"),t("code",[s._v("useState")]),s._v("、"),t("code",[s._v("useRef")]),s._v("等，普通函数则不能。由此可以通过内置的"),t("code",[s._v("Hooks")]),s._v("获得"),t("code",[s._v("Fiber")]),s._v("的访问方式，可以实现在组件级别存储数据的方案等。")]),s._v(" "),t("li",[s._v("自定义"),t("code",[s._v("Hooks")]),s._v("需要以"),t("code",[s._v("use")]),s._v("开头，普通函数则没有这个限制。使用"),t("code",[s._v("use")]),s._v("开头并不是一个语法或者一个强制性的方案，更像是一个约定，就像是"),t("code",[s._v("GET")]),s._v("请求约定语义不携带"),t("code",[s._v("Body")]),s._v("一样，使用"),t("code",[s._v("use")]),s._v("开头的目的就是让"),t("code",[s._v("React")]),s._v("识别出来这是个"),t("code",[s._v("Hooks")]),s._v("，从而检查这些规则约束，通常也会使用"),t("code",[s._v("ESlint")]),s._v("配合"),t("code",[s._v("eslint-plugin-react-hooks")]),s._v("检查这些规则，从而提前避免错误的使用。")])]),s._v(" "),t("h2",{attrs:{id:"每日一题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#每日一题"}},[s._v("#")]),s._v(" 每日一题")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("https://github.com/WindrunnerMax/EveryDay\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("https://www.zhihu.com/question/491311403\nhttps://zh-hans.reactjs.org/docs/hooks-custom.html\nhttps://stackoverflow.com/questions/60133412/react-custom-hooks-vs-normal-functions-what-is-the-difference\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);